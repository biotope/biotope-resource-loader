(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    (global.resourceLoader = factory());
}(this, (function () { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    var FETCH_STATUS = {
        PENDING: 'pending',
        DONE: 'done'
    };

    if (typeof Object.assign !== 'function') {
        // Must be writable: true, enumerable: false, configurable: true
        Object.defineProperty(Object, 'assign', {
            value: function assign(target, varArgs) {
                if (target === null) {
                    // TypeError if undefined or null
                    throw new TypeError('Cannot convert undefined or null to object');
                }
                var to = Object(target);
                for (var index = 1; index < arguments.length; index++) {
                    var nextSource = arguments[index];
                    if (nextSource !== null) {
                        // Skip over if undefined or null
                        for (var nextKey in nextSource) {
                            // Avoid bugs when hasOwnProperty is shadowed
                            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey))
                                to[nextKey] = nextSource[nextKey];
                        }
                    }
                }
                return to;
            },
            writable: true,
            configurable: true
        });
    }

    var EVENTS = {
        RESOURCE_LOADED: 'RESOURCE_LOADED',
        COMPONENT_READY: 'COMPONENT_READY'
    };

    function generatePatches(state, basepath, patches, inversePatches, baseValue, resultValue) {
        if (patches) if (Array.isArray(baseValue)) generateArrayPatches(state, basepath, patches, inversePatches, baseValue, resultValue);else generateObjectPatches(state, basepath, patches, inversePatches, baseValue, resultValue);
    }

    function generateArrayPatches(state, basepath, patches, inversePatches, baseValue, resultValue) {
        var shared = Math.min(baseValue.length, resultValue.length);
        for (var i = 0; i < shared; i++) {
            if (state.assigned[i] && baseValue[i] !== resultValue[i]) {
                var path = basepath.concat(i);
                patches.push({ op: "replace", path: path, value: resultValue[i] });
                inversePatches.push({ op: "replace", path: path, value: baseValue[i] });
            }
        }
        if (shared < resultValue.length) {
            // stuff was added
            for (var _i = shared; _i < resultValue.length; _i++) {
                var _path = basepath.concat(_i);
                patches.push({ op: "add", path: _path, value: resultValue[_i] });
            }
            inversePatches.push({
                op: "replace",
                path: basepath.concat("length"),
                value: baseValue.length
            });
        } else if (shared < baseValue.length) {
            // stuff was removed
            patches.push({
                op: "replace",
                path: basepath.concat("length"),
                value: resultValue.length
            });
            for (var _i2 = shared; _i2 < baseValue.length; _i2++) {
                var _path2 = basepath.concat(_i2);
                inversePatches.push({ op: "add", path: _path2, value: baseValue[_i2] });
            }
        }
    }

    function generateObjectPatches(state, basepath, patches, inversePatches, baseValue, resultValue) {
        each(state.assigned, function (key, assignedValue) {
            var origValue = baseValue[key];
            var value = resultValue[key];
            var op = !assignedValue ? "remove" : key in baseValue ? "replace" : "add";
            if (origValue === baseValue && op === "replace") return;
            var path = basepath.concat(key);
            patches.push(op === "remove" ? { op: op, path: path } : { op: op, path: path, value: value });
            inversePatches.push(op === "add" ? { op: "remove", path: path } : op === "remove" ? { op: "add", path: path, value: origValue } : { op: "replace", path: path, value: origValue });
        });
    }

    function applyPatches(draft, patches) {
        var _loop = function _loop(i) {
            var patch = patches[i];
            if (patch.path.length === 0 && patch.op === "replace") {
                draft = patch.value;
            } else {
                var path = patch.path.slice();
                var key = path.pop();
                var base = path.reduce(function (current, part) {
                    if (!current) throw new Error("Cannot apply patch, path doesn't resolve: " + patch.path.join("/"));
                    return current[part];
                }, draft);
                if (!base) throw new Error("Cannot apply patch, path doesn't resolve: " + patch.path.join("/"));
                switch (patch.op) {
                    case "replace":
                    case "add":
                        // TODO: add support is not extensive, it does not support insertion or `-` atm!
                        base[key] = patch.value;
                        break;
                    case "remove":
                        if (Array.isArray(base)) {
                            if (key === base.length - 1) base.length -= 1;else throw new Error("Remove can only remove the last key of an array, index: " + key + ", length: " + base.length);
                        } else delete base[key];
                        break;
                    default:
                        throw new Error("Unsupported patch operation: " + patch.op);
                }
            }
        };

        for (var i = 0; i < patches.length; i++) {
            _loop(i);
        }
        return draft;
    }

    var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
      return typeof obj;
    } : function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };



















    var defineProperty = function (obj, key, value) {
      if (key in obj) {
        Object.defineProperty(obj, key, {
          value: value,
          enumerable: true,
          configurable: true,
          writable: true
        });
      } else {
        obj[key] = value;
      }

      return obj;
    };

    var NOTHING = typeof Symbol !== "undefined" ? Symbol("immer-nothing") : defineProperty({}, "immer-nothing", true);

    var PROXY_STATE = typeof Symbol !== "undefined" ? Symbol("immer-proxy-state") : "__$immer_state";

    var RETURNED_AND_MODIFIED_ERROR = "An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.";

    function verifyMinified() {}

    var inProduction = typeof process !== "undefined" && process.env.NODE_ENV === "production" || verifyMinified.name !== "verifyMinified";

    var autoFreeze = !inProduction;
    var useProxies = typeof Proxy !== "undefined";

    function getUseProxies() {
        return useProxies;
    }

    function isProxy(value) {
        return !!value && !!value[PROXY_STATE];
    }

    function isProxyable(value) {
        if (!value) return false;
        if ((typeof value === "undefined" ? "undefined" : _typeof(value)) !== "object") return false;
        if (Array.isArray(value)) return true;
        var proto = Object.getPrototypeOf(value);
        return proto === null || proto === Object.prototype;
    }

    function freeze(value) {
        if (autoFreeze) {
            Object.freeze(value);
        }
        return value;
    }

    var assign = Object.assign || function assign(target, value) {
        for (var key in value) {
            if (has(value, key)) {
                target[key] = value[key];
            }
        }
        return target;
    };

    function shallowCopy(value) {
        if (Array.isArray(value)) return value.slice();
        var target = value.__proto__ === undefined ? Object.create(null) : {};
        return assign(target, value);
    }

    function each(value, cb) {
        if (Array.isArray(value)) {
            for (var i = 0; i < value.length; i++) {
                cb(i, value[i]);
            }
        } else {
            for (var key in value) {
                cb(key, value[key]);
            }
        }
    }

    function has(thing, prop) {
        return Object.prototype.hasOwnProperty.call(thing, prop);
    }

    // given a base object, returns it if unmodified, or return the changed cloned if modified
    function finalize(base, path, patches, inversePatches) {
        if (isProxy(base)) {
            var state = base[PROXY_STATE];
            if (state.modified === true) {
                if (state.finalized === true) return state.copy;
                state.finalized = true;
                var result = finalizeObject(useProxies ? state.copy : state.copy = shallowCopy(base), state, path, patches, inversePatches);
                generatePatches(state, path, patches, inversePatches, state.base, result);
                return result;
            } else {
                return state.base;
            }
        }
        finalizeNonProxiedObject(base);
        return base;
    }

    function finalizeObject(copy, state, path, patches, inversePatches) {
        var base = state.base;
        each(copy, function (prop, value) {
            if (value !== base[prop]) {
                // if there was an assignment on this property, we don't need to generate
                // patches for the subtree
                var _generatePatches = patches && !has(state.assigned, prop);
                copy[prop] = finalize(value, _generatePatches && path.concat(prop), _generatePatches && patches, inversePatches);
            }
        });
        return freeze(copy);
    }

    function finalizeNonProxiedObject(parent) {
        // If finalize is called on an object that was not a proxy, it means that it is an object that was not there in the original
        // tree and it could contain proxies at arbitrarily places. Let's find and finalize them as well
        if (!isProxyable(parent)) return;
        if (Object.isFrozen(parent)) return;
        each(parent, function (i, child) {
            if (isProxy(child)) {
                parent[i] = finalize(child);
            } else finalizeNonProxiedObject(child);
        });
        // always freeze completely new data
        freeze(parent);
    }



    function is(x, y) {
        // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
        if (x === y) {
            return x !== 0 || 1 / x === 1 / y;
        } else {
            return x !== x && y !== y;
        }
    }

    // @ts-check

    var proxies = null;

    var objectTraps = {
        get: get$1,
        has: function has$$1(target, prop) {
            return prop in source(target);
        },
        ownKeys: function ownKeys(target) {
            return Reflect.ownKeys(source(target));
        },

        set: set$1,
        deleteProperty: deleteProperty,
        getOwnPropertyDescriptor: getOwnPropertyDescriptor,
        defineProperty: defineProperty$1,
        setPrototypeOf: function setPrototypeOf() {
            throw new Error("Immer does not support `setPrototypeOf()`.");
        }
    };

    var arrayTraps = {};
    each(objectTraps, function (key, fn) {
        arrayTraps[key] = function () {
            arguments[0] = arguments[0][0];
            return fn.apply(this, arguments);
        };
    });
    arrayTraps.deleteProperty = function (state, prop) {
        if (isNaN(parseInt(prop))) throw new Error("Immer does not support deleting properties from arrays: " + prop);
        return objectTraps.deleteProperty.call(this, state[0], prop);
    };
    arrayTraps.set = function (state, prop, value) {
        if (prop !== "length" && isNaN(parseInt(prop))) throw new Error("Immer does not support setting non-numeric properties on arrays: " + prop);
        return objectTraps.set.call(this, state[0], prop, value);
    };

    function createState(parent, base) {
        return {
            modified: false, // this tree is modified (either this object or one of it's children)
            assigned: {}, // true: value was assigned to these props, false: was removed
            finalized: false,
            parent: parent,
            base: base,
            copy: undefined,
            proxies: {}
        };
    }

    function source(state) {
        return state.modified === true ? state.copy : state.base;
    }

    function get$1(state, prop) {
        if (prop === PROXY_STATE) return state;
        if (state.modified) {
            var value = state.copy[prop];
            if (value === state.base[prop] && isProxyable(value))
                // only create proxy if it is not yet a proxy, and not a new object
                // (new objects don't need proxying, they will be processed in finalize anyway)
                return state.copy[prop] = createProxy(state, value);
            return value;
        } else {
            if (has(state.proxies, prop)) return state.proxies[prop];
            var _value = state.base[prop];
            if (!isProxy(_value) && isProxyable(_value)) return state.proxies[prop] = createProxy(state, _value);
            return _value;
        }
    }

    function set$1(state, prop, value) {
        // TODO: optimize
        state.assigned[prop] = true;
        if (!state.modified) {
            if (prop in state.base && is(state.base[prop], value) || has(state.proxies, prop) && state.proxies[prop] === value) return true;
            markChanged(state);
        }
        state.copy[prop] = value;
        return true;
    }

    function deleteProperty(state, prop) {
        state.assigned[prop] = false;
        markChanged(state);
        delete state.copy[prop];
        return true;
    }

    function getOwnPropertyDescriptor(state, prop) {
        var owner = state.modified ? state.copy : has(state.proxies, prop) ? state.proxies : state.base;
        var descriptor = Reflect.getOwnPropertyDescriptor(owner, prop);
        if (descriptor && !(Array.isArray(owner) && prop === "length")) descriptor.configurable = true;
        return descriptor;
    }

    function defineProperty$1() {
        throw new Error("Immer does not support defining properties on draft objects.");
    }

    function markChanged(state) {
        if (!state.modified) {
            state.modified = true;
            state.copy = shallowCopy(state.base);
            // copy the proxies over the base-copy
            Object.assign(state.copy, state.proxies); // yup that works for arrays as well
            if (state.parent) markChanged(state.parent);
        }
    }

    // creates a proxy for plain objects / arrays
    function createProxy(parentState, base, key) {
        if (isProxy(base)) throw new Error("Immer bug. Plz report.");
        var state = createState(parentState, base, key);
        var proxy = Array.isArray(base) ? Proxy.revocable([state], arrayTraps) : Proxy.revocable(state, objectTraps);
        proxies.push(proxy);
        return proxy.proxy;
    }

    function produceProxy(baseState, producer, patchListener) {
        if (isProxy(baseState)) {
            // See #100, don't nest producers
            var returnValue = producer.call(baseState, baseState);
            return returnValue === undefined ? baseState : returnValue;
        }
        var previousProxies = proxies;
        proxies = [];
        var patches = patchListener && [];
        var inversePatches = patchListener && [];
        try {
            // create proxy for root
            var rootProxy = createProxy(undefined, baseState);
            // execute the thunk
            var _returnValue = producer.call(rootProxy, rootProxy);
            // and finalize the modified proxy
            var result = void 0;
            // check whether the draft was modified and/or a value was returned
            if (_returnValue !== undefined && _returnValue !== rootProxy) {
                // something was returned, and it wasn't the proxy itself
                if (rootProxy[PROXY_STATE].modified) throw new Error(RETURNED_AND_MODIFIED_ERROR);

                // See #117
                // Should we just throw when returning a proxy which is not the root, but a subset of the original state?
                // Looks like a wrongly modeled reducer
                result = finalize(_returnValue);
                if (patches) {
                    patches.push({ op: "replace", path: [], value: result });
                    inversePatches.push({ op: "replace", path: [], value: baseState });
                }
            } else {
                result = finalize(rootProxy, [], patches, inversePatches);
            }
            // revoke all proxies
            each(proxies, function (_, p) {
                return p.revoke();
            });
            patchListener && patchListener(patches, inversePatches);
            return result;
        } finally {
            proxies = previousProxies;
        }
    }

    // @ts-check

    var descriptors = {};
    var states = null;

    function createState$1(parent, proxy, base) {
        return {
            modified: false,
            assigned: {}, // true: value was assigned to these props, false: was removed
            hasCopy: false,
            parent: parent,
            base: base,
            proxy: proxy,
            copy: undefined,
            finished: false,
            finalizing: false,
            finalized: false
        };
    }

    function source$1(state) {
        return state.hasCopy ? state.copy : state.base;
    }

    function _get(state, prop) {
        assertUnfinished(state);
        var value = source$1(state)[prop];
        if (!state.finalizing && value === state.base[prop] && isProxyable(value)) {
            // only create a proxy if the value is proxyable, and the value was in the base state
            // if it wasn't in the base state, the object is already modified and we will process it in finalize
            prepareCopy(state);
            return state.copy[prop] = createProxy$1(state, value);
        }
        return value;
    }

    function _set(state, prop, value) {
        assertUnfinished(state);
        state.assigned[prop] = true; // optimization; skip this if there is no listener
        if (!state.modified) {
            if (is(source$1(state)[prop], value)) return;
            markChanged$1(state);
            prepareCopy(state);
        }
        state.copy[prop] = value;
    }

    function markChanged$1(state) {
        if (!state.modified) {
            state.modified = true;
            if (state.parent) markChanged$1(state.parent);
        }
    }

    function prepareCopy(state) {
        if (state.hasCopy) return;
        state.hasCopy = true;
        state.copy = shallowCopy(state.base);
    }

    // creates a proxy for plain objects / arrays
    function createProxy$1(parent, base) {
        var proxy = shallowCopy(base);
        each(base, function (i) {
            Object.defineProperty(proxy, "" + i, createPropertyProxy("" + i));
        });
        var state = createState$1(parent, proxy, base);
        createHiddenProperty(proxy, PROXY_STATE, state);
        states.push(state);
        return proxy;
    }

    function createPropertyProxy(prop) {
        return descriptors[prop] || (descriptors[prop] = {
            configurable: true,
            enumerable: true,
            get: function get$$1() {
                return _get(this[PROXY_STATE], prop);
            },
            set: function set$$1(value) {
                _set(this[PROXY_STATE], prop, value);
            }
        });
    }

    function assertUnfinished(state) {
        if (state.finished === true) throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + JSON.stringify(state.copy || state.base));
    }

    // this sounds very expensive, but actually it is not that expensive in practice
    // as it will only visit proxies, and only do key-based change detection for objects for
    // which it is not already know that they are changed (that is, only object for which no known key was changed)
    function markChangesSweep() {
        // intentionally we process the proxies in reverse order;
        // ideally we start by processing leafs in the tree, because if a child has changed, we don't have to check the parent anymore
        // reverse order of proxy creation approximates this
        for (var i = states.length - 1; i >= 0; i--) {
            var state = states[i];
            if (state.modified === false) {
                if (Array.isArray(state.base)) {
                    if (hasArrayChanges(state)) markChanged$1(state);
                } else if (hasObjectChanges(state)) markChanged$1(state);
            }
        }
    }

    function markChangesRecursively(object) {
        if (!object || (typeof object === "undefined" ? "undefined" : _typeof(object)) !== "object") return;
        var state = object[PROXY_STATE];
        if (!state) return;
        var proxy = state.proxy,
            base = state.base;

        if (Array.isArray(object)) {
            if (hasArrayChanges(state)) {
                markChanged$1(state);
                state.assigned.length = true;
                if (proxy.length < base.length) for (var i = proxy.length; i < base.length; i++) {
                    state.assigned[i] = false;
                } else for (var _i = base.length; _i < proxy.length; _i++) {
                    state.assigned[_i] = true;
                }each(proxy, function (index, child) {
                    if (!state.assigned[index]) markChangesRecursively(child);
                });
            }
        } else {
            var _diffKeys = diffKeys(base, proxy),
                added = _diffKeys.added,
                removed = _diffKeys.removed;

            if (added.length > 0 || removed.length > 0) markChanged$1(state);
            each(added, function (_, key) {
                state.assigned[key] = true;
            });
            each(removed, function (_, key) {
                state.assigned[key] = false;
            });
            each(proxy, function (key, child) {
                if (!state.assigned[key]) markChangesRecursively(child);
            });
        }
    }

    function diffKeys(from, to) {
        // TODO: optimize
        var a = Object.keys(from);
        var b = Object.keys(to);
        return {
            added: b.filter(function (key) {
                return a.indexOf(key) === -1;
            }),
            removed: a.filter(function (key) {
                return b.indexOf(key) === -1;
            })
        };
    }

    function hasObjectChanges(state) {
        var baseKeys = Object.keys(state.base);
        var keys = Object.keys(state.proxy);
        return !shallowEqual(baseKeys, keys);
    }

    function hasArrayChanges(state) {
        var proxy = state.proxy;

        if (proxy.length !== state.base.length) return true;
        // See #116
        // If we first shorten the length, our array interceptors will be removed.
        // If after that new items are added, result in the same original length,
        // those last items will have no intercepting property.
        // So if there is no own descriptor on the last position, we know that items were removed and added
        // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check
        // the last one
        var descriptor = Object.getOwnPropertyDescriptor(proxy, proxy.length - 1);
        // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)
        if (descriptor && !descriptor.get) return true;
        // For all other cases, we don't have to compare, as they would have been picked up by the index setters
        return false;
    }

    function produceEs5(baseState, producer, patchListener) {
        if (isProxy(baseState)) {
            // See #100, don't nest producers
            var returnValue = producer.call(baseState, baseState);
            return returnValue === undefined ? baseState : returnValue;
        }
        var prevStates = states;
        states = [];
        var patches = patchListener && [];
        var inversePatches = patchListener && [];
        try {
            // create proxy for root
            var rootProxy = createProxy$1(undefined, baseState);
            // execute the thunk
            var _returnValue = producer.call(rootProxy, rootProxy);
            // and finalize the modified proxy
            each(states, function (_, state) {
                state.finalizing = true;
            });
            var result = void 0;
            // check whether the draft was modified and/or a value was returned
            if (_returnValue !== undefined && _returnValue !== rootProxy) {
                // something was returned, and it wasn't the proxy itself
                if (rootProxy[PROXY_STATE].modified) throw new Error(RETURNED_AND_MODIFIED_ERROR);
                result = finalize(_returnValue);
                if (patches) {
                    patches.push({ op: "replace", path: [], value: result });
                    inversePatches.push({ op: "replace", path: [], value: baseState });
                }
            } else {
                if (patchListener) markChangesRecursively(rootProxy);
                markChangesSweep(); // this one is more efficient if we don't need to know which attributes have changed
                result = finalize(rootProxy, [], patches, inversePatches);
            }
            // make sure all proxies become unusable
            each(states, function (_, state) {
                state.finished = true;
            });
            patchListener && patchListener(patches, inversePatches);
            return result;
        } finally {
            states = prevStates;
        }
    }

    function shallowEqual(objA, objB) {
        //From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
        if (is(objA, objB)) return true;
        if ((typeof objA === "undefined" ? "undefined" : _typeof(objA)) !== "object" || objA === null || (typeof objB === "undefined" ? "undefined" : _typeof(objB)) !== "object" || objB === null) {
            return false;
        }
        var keysA = Object.keys(objA);
        var keysB = Object.keys(objB);
        if (keysA.length !== keysB.length) return false;
        for (var i = 0; i < keysA.length; i++) {
            if (!hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
                return false;
            }
        }
        return true;
    }

    function createHiddenProperty(target, prop, value) {
        Object.defineProperty(target, prop, {
            value: value,
            enumerable: false,
            writable: true
        });
    }

    /**
     * produce takes a state, and runs a function against it.
     * That function can freely mutate the state, as it will create copies-on-write.
     * This means that the original state will stay unchanged, and once the function finishes, the modified state is returned
     *
     * @export
     * @param {any} baseState - the state to start with
     * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified
     * @param {Function} patchListener - optional function that will be called with all the patches produced here
     * @returns {any} a new state, or the base state if nothing was modified
     */
    function produce(baseState, producer, patchListener) {
        // prettier-ignore
        if (arguments.length < 1 || arguments.length > 3) throw new Error("produce expects 1 to 3 arguments, got " + arguments.length);

        // curried invocation
        if (typeof baseState === "function") {
            // prettier-ignore
            if (typeof producer === "function") throw new Error("if first argument is a function (curried invocation), the second argument to produce cannot be a function");

            var initialState = producer;
            var recipe = baseState;

            return function () {
                var args = arguments;

                var currentState = args[0] === undefined && initialState !== undefined ? initialState : args[0];

                return produce(currentState, function (draft) {
                    args[0] = draft; // blegh!
                    return recipe.apply(draft, args);
                });
            };
        }

        // prettier-ignore
        {
            if (typeof producer !== "function") throw new Error("if first argument is not a function, the second argument to produce should be a function");
            if (patchListener !== undefined && typeof patchListener !== "function") throw new Error("the third argument of a producer should not be set or a function");
        }

        // if state is a primitive, don't bother proxying at all
        if ((typeof baseState === "undefined" ? "undefined" : _typeof(baseState)) !== "object" || baseState === null) {
            var returnValue = producer(baseState);
            return returnValue === undefined ? baseState : normalizeResult(returnValue);
        }

        if (!isProxyable(baseState)) throw new Error("the first argument to an immer producer should be a primitive, plain object or array, got " + (typeof baseState === "undefined" ? "undefined" : _typeof(baseState)) + ": \"" + baseState + "\"");
        return normalizeResult(getUseProxies() ? produceProxy(baseState, producer, patchListener) : produceEs5(baseState, producer, patchListener));
    }

    function normalizeResult(result) {
        return result === NOTHING ? undefined : result;
    }

    var applyPatches$1 = produce(applyPatches);

    var loadJs = function (resource) {
        var script = document.createElement('script');
        script.src = resource.path;
        script.async = true;
        document.body.append(script);
        script.addEventListener('load', function () {
            // console.log('📖 script ready', script);
            var e = new CustomEvent(EVENTS.RESOURCE_LOADED, { detail: resource });
            document.dispatchEvent(e);
        });
    };

    var isCss = function (resource) { return resource.path.indexOf('.css') > -1; };
    var loadCss = function (resource) {
        fetch(resource.path).then(function () {
            var style = document.createElement('link');
            style.rel = 'stylesheet';
            style.href = resource.path;
            document.body.append(style);
            style.addEventListener('load', function () {
                // console.log('💅 style ready', style);
                var e = new CustomEvent(EVENTS.RESOURCE_LOADED, { detail: resource });
                document.dispatchEvent(e);
            });
        });
    };

    function _isPlaceholder(a) {
           return a != null && typeof a === 'object' && a['@@functional/placeholder'] === true;
    }

    /**
     * Optimized internal one-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curry1(fn) {
      return function f1(a) {
        if (arguments.length === 0 || _isPlaceholder(a)) {
          return f1;
        } else {
          return fn.apply(this, arguments);
        }
      };
    }

    /**
     * Returns a function that always returns the given value. Note that for
     * non-primitives the value returned is a reference to the original value.
     *
     * This function is known as `const`, `constant`, or `K` (for K combinator) in
     * other languages and libraries.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig a -> (* -> a)
     * @param {*} val The value to wrap in a function
     * @return {Function} A Function :: * -> val.
     * @example
     *
     *      var t = R.always('Tee');
     *      t(); //=> 'Tee'
     */
    var always = /*#__PURE__*/_curry1(function always(val) {
      return function () {
        return val;
      };
    });

    /**
     * A function that always returns `false`. Any passed in parameters are ignored.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Function
     * @sig * -> Boolean
     * @param {*}
     * @return {Boolean}
     * @see R.always, R.T
     * @example
     *
     *      R.F(); //=> false
     */
    var F = /*#__PURE__*/always(false);

    /**
     * A function that always returns `true`. Any passed in parameters are ignored.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Function
     * @sig * -> Boolean
     * @param {*}
     * @return {Boolean}
     * @see R.always, R.F
     * @example
     *
     *      R.T(); //=> true
     */
    var T = /*#__PURE__*/always(true);

    /**
     * A special placeholder value used to specify "gaps" within curried functions,
     * allowing partial application of any combination of arguments, regardless of
     * their positions.
     *
     * If `g` is a curried ternary function and `_` is `R.__`, the following are
     * equivalent:
     *
     *   - `g(1, 2, 3)`
     *   - `g(_, 2, 3)(1)`
     *   - `g(_, _, 3)(1)(2)`
     *   - `g(_, _, 3)(1, 2)`
     *   - `g(_, 2, _)(1, 3)`
     *   - `g(_, 2)(1)(3)`
     *   - `g(_, 2)(1, 3)`
     *   - `g(_, 2)(_, 3)(1)`
     *
     * @constant
     * @memberOf R
     * @since v0.6.0
     * @category Function
     * @example
     *
     *      var greet = R.replace('{name}', R.__, 'Hello, {name}!');
     *      greet('Alice'); //=> 'Hello, Alice!'
     */

    /**
     * Optimized internal two-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curry2(fn) {
      return function f2(a, b) {
        switch (arguments.length) {
          case 0:
            return f2;
          case 1:
            return _isPlaceholder(a) ? f2 : _curry1(function (_b) {
              return fn(a, _b);
            });
          default:
            return _isPlaceholder(a) && _isPlaceholder(b) ? f2 : _isPlaceholder(a) ? _curry1(function (_a) {
              return fn(_a, b);
            }) : _isPlaceholder(b) ? _curry1(function (_b) {
              return fn(a, _b);
            }) : fn(a, b);
        }
      };
    }

    /**
     * Adds two values.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a
     * @param {Number} b
     * @return {Number}
     * @see R.subtract
     * @example
     *
     *      R.add(2, 3);       //=>  5
     *      R.add(7)(10);      //=> 17
     */
    var add = /*#__PURE__*/_curry2(function add(a, b) {
      return Number(a) + Number(b);
    });

    /**
     * Private `concat` function to merge two array-like objects.
     *
     * @private
     * @param {Array|Arguments} [set1=[]] An array-like object.
     * @param {Array|Arguments} [set2=[]] An array-like object.
     * @return {Array} A new, merged array.
     * @example
     *
     *      _concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
     */
    function _concat(set1, set2) {
      set1 = set1 || [];
      set2 = set2 || [];
      var idx;
      var len1 = set1.length;
      var len2 = set2.length;
      var result = [];

      idx = 0;
      while (idx < len1) {
        result[result.length] = set1[idx];
        idx += 1;
      }
      idx = 0;
      while (idx < len2) {
        result[result.length] = set2[idx];
        idx += 1;
      }
      return result;
    }

    function _arity(n, fn) {
      /* eslint-disable no-unused-vars */
      switch (n) {
        case 0:
          return function () {
            return fn.apply(this, arguments);
          };
        case 1:
          return function (a0) {
            return fn.apply(this, arguments);
          };
        case 2:
          return function (a0, a1) {
            return fn.apply(this, arguments);
          };
        case 3:
          return function (a0, a1, a2) {
            return fn.apply(this, arguments);
          };
        case 4:
          return function (a0, a1, a2, a3) {
            return fn.apply(this, arguments);
          };
        case 5:
          return function (a0, a1, a2, a3, a4) {
            return fn.apply(this, arguments);
          };
        case 6:
          return function (a0, a1, a2, a3, a4, a5) {
            return fn.apply(this, arguments);
          };
        case 7:
          return function (a0, a1, a2, a3, a4, a5, a6) {
            return fn.apply(this, arguments);
          };
        case 8:
          return function (a0, a1, a2, a3, a4, a5, a6, a7) {
            return fn.apply(this, arguments);
          };
        case 9:
          return function (a0, a1, a2, a3, a4, a5, a6, a7, a8) {
            return fn.apply(this, arguments);
          };
        case 10:
          return function (a0, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
            return fn.apply(this, arguments);
          };
        default:
          throw new Error('First argument to _arity must be a non-negative integer no greater than ten');
      }
    }

    /**
     * Internal curryN function.
     *
     * @private
     * @category Function
     * @param {Number} length The arity of the curried function.
     * @param {Array} received An array of arguments received thus far.
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curryN(length, received, fn) {
      return function () {
        var combined = [];
        var argsIdx = 0;
        var left = length;
        var combinedIdx = 0;
        while (combinedIdx < received.length || argsIdx < arguments.length) {
          var result;
          if (combinedIdx < received.length && (!_isPlaceholder(received[combinedIdx]) || argsIdx >= arguments.length)) {
            result = received[combinedIdx];
          } else {
            result = arguments[argsIdx];
            argsIdx += 1;
          }
          combined[combinedIdx] = result;
          if (!_isPlaceholder(result)) {
            left -= 1;
          }
          combinedIdx += 1;
        }
        return left <= 0 ? fn.apply(this, combined) : _arity(left, _curryN(length, combined, fn));
      };
    }

    /**
     * Returns a curried equivalent of the provided function, with the specified
     * arity. The curried function has two unusual capabilities. First, its
     * arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the
     * following are equivalent:
     *
     *   - `g(1)(2)(3)`
     *   - `g(1)(2, 3)`
     *   - `g(1, 2)(3)`
     *   - `g(1, 2, 3)`
     *
     * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
     * "gaps", allowing partial application of any combination of arguments,
     * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
     * the following are equivalent:
     *
     *   - `g(1, 2, 3)`
     *   - `g(_, 2, 3)(1)`
     *   - `g(_, _, 3)(1)(2)`
     *   - `g(_, _, 3)(1, 2)`
     *   - `g(_, 2)(1)(3)`
     *   - `g(_, 2)(1, 3)`
     *   - `g(_, 2)(_, 3)(1)`
     *
     * @func
     * @memberOf R
     * @since v0.5.0
     * @category Function
     * @sig Number -> (* -> a) -> (* -> a)
     * @param {Number} length The arity for the returned function.
     * @param {Function} fn The function to curry.
     * @return {Function} A new, curried function.
     * @see R.curry
     * @example
     *
     *      var sumArgs = (...args) => R.sum(args);
     *
     *      var curriedAddFourNumbers = R.curryN(4, sumArgs);
     *      var f = curriedAddFourNumbers(1, 2);
     *      var g = f(3);
     *      g(4); //=> 10
     */
    var curryN = /*#__PURE__*/_curry2(function curryN(length, fn) {
      if (length === 1) {
        return _curry1(fn);
      }
      return _arity(length, _curryN(length, [], fn));
    });

    /**
     * Optimized internal three-arity curry function.
     *
     * @private
     * @category Function
     * @param {Function} fn The function to curry.
     * @return {Function} The curried function.
     */
    function _curry3(fn) {
      return function f3(a, b, c) {
        switch (arguments.length) {
          case 0:
            return f3;
          case 1:
            return _isPlaceholder(a) ? f3 : _curry2(function (_b, _c) {
              return fn(a, _b, _c);
            });
          case 2:
            return _isPlaceholder(a) && _isPlaceholder(b) ? f3 : _isPlaceholder(a) ? _curry2(function (_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) ? _curry2(function (_b, _c) {
              return fn(a, _b, _c);
            }) : _curry1(function (_c) {
              return fn(a, b, _c);
            });
          default:
            return _isPlaceholder(a) && _isPlaceholder(b) && _isPlaceholder(c) ? f3 : _isPlaceholder(a) && _isPlaceholder(b) ? _curry2(function (_a, _b) {
              return fn(_a, _b, c);
            }) : _isPlaceholder(a) && _isPlaceholder(c) ? _curry2(function (_a, _c) {
              return fn(_a, b, _c);
            }) : _isPlaceholder(b) && _isPlaceholder(c) ? _curry2(function (_b, _c) {
              return fn(a, _b, _c);
            }) : _isPlaceholder(a) ? _curry1(function (_a) {
              return fn(_a, b, c);
            }) : _isPlaceholder(b) ? _curry1(function (_b) {
              return fn(a, _b, c);
            }) : _isPlaceholder(c) ? _curry1(function (_c) {
              return fn(a, b, _c);
            }) : fn(a, b, c);
        }
      };
    }

    /**
     * Tests whether or not an object is an array.
     *
     * @private
     * @param {*} val The object to test.
     * @return {Boolean} `true` if `val` is an array, `false` otherwise.
     * @example
     *
     *      _isArray([]); //=> true
     *      _isArray(null); //=> false
     *      _isArray({}); //=> false
     */
    var _isArray = Array.isArray || function _isArray(val) {
      return val != null && val.length >= 0 && Object.prototype.toString.call(val) === '[object Array]';
    };

    function _isTransformer(obj) {
      return typeof obj['@@transducer/step'] === 'function';
    }

    /**
     * Returns a function that dispatches with different strategies based on the
     * object in list position (last argument). If it is an array, executes [fn].
     * Otherwise, if it has a function with one of the given method names, it will
     * execute that function (functor case). Otherwise, if it is a transformer,
     * uses transducer [xf] to return a new transformer (transducer case).
     * Otherwise, it will default to executing [fn].
     *
     * @private
     * @param {Array} methodNames properties to check for a custom implementation
     * @param {Function} xf transducer to initialize if object is transformer
     * @param {Function} fn default ramda implementation
     * @return {Function} A function that dispatches on object in list position
     */
    function _dispatchable(methodNames, xf, fn) {
      return function () {
        if (arguments.length === 0) {
          return fn();
        }
        var args = Array.prototype.slice.call(arguments, 0);
        var obj = args.pop();
        if (!_isArray(obj)) {
          var idx = 0;
          while (idx < methodNames.length) {
            if (typeof obj[methodNames[idx]] === 'function') {
              return obj[methodNames[idx]].apply(obj, args);
            }
            idx += 1;
          }
          if (_isTransformer(obj)) {
            var transducer = xf.apply(null, args);
            return transducer(obj);
          }
        }
        return fn.apply(this, arguments);
      };
    }

    var _xfBase = {
      init: function () {
        return this.xf['@@transducer/init']();
      },
      result: function (result) {
        return this.xf['@@transducer/result'](result);
      }
    };

    /**
     * Returns the larger of its two arguments.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Relation
     * @sig Ord a => a -> a -> a
     * @param {*} a
     * @param {*} b
     * @return {*}
     * @see R.maxBy, R.min
     * @example
     *
     *      R.max(789, 123); //=> 789
     *      R.max('a', 'b'); //=> 'b'
     */
    var max = /*#__PURE__*/_curry2(function max(a, b) {
      return b > a ? b : a;
    });

    function _map(fn, functor) {
      var idx = 0;
      var len = functor.length;
      var result = Array(len);
      while (idx < len) {
        result[idx] = fn(functor[idx]);
        idx += 1;
      }
      return result;
    }

    function _isString(x) {
      return Object.prototype.toString.call(x) === '[object String]';
    }

    /**
     * Tests whether or not an object is similar to an array.
     *
     * @private
     * @category Type
     * @category List
     * @sig * -> Boolean
     * @param {*} x The object to test.
     * @return {Boolean} `true` if `x` has a numeric length property and extreme indices defined; `false` otherwise.
     * @example
     *
     *      _isArrayLike([]); //=> true
     *      _isArrayLike(true); //=> false
     *      _isArrayLike({}); //=> false
     *      _isArrayLike({length: 10}); //=> false
     *      _isArrayLike({0: 'zero', 9: 'nine', length: 10}); //=> true
     */
    var _isArrayLike = /*#__PURE__*/_curry1(function isArrayLike(x) {
      if (_isArray(x)) {
        return true;
      }
      if (!x) {
        return false;
      }
      if (typeof x !== 'object') {
        return false;
      }
      if (_isString(x)) {
        return false;
      }
      if (x.nodeType === 1) {
        return !!x.length;
      }
      if (x.length === 0) {
        return true;
      }
      if (x.length > 0) {
        return x.hasOwnProperty(0) && x.hasOwnProperty(x.length - 1);
      }
      return false;
    });

    var XWrap = /*#__PURE__*/function () {
      function XWrap(fn) {
        this.f = fn;
      }
      XWrap.prototype['@@transducer/init'] = function () {
        throw new Error('init not implemented on XWrap');
      };
      XWrap.prototype['@@transducer/result'] = function (acc) {
        return acc;
      };
      XWrap.prototype['@@transducer/step'] = function (acc, x) {
        return this.f(acc, x);
      };

      return XWrap;
    }();

    function _xwrap(fn) {
      return new XWrap(fn);
    }

    /**
     * Creates a function that is bound to a context.
     * Note: `R.bind` does not provide the additional argument-binding capabilities of
     * [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).
     *
     * @func
     * @memberOf R
     * @since v0.6.0
     * @category Function
     * @category Object
     * @sig (* -> *) -> {*} -> (* -> *)
     * @param {Function} fn The function to bind to context
     * @param {Object} thisObj The context to bind `fn` to
     * @return {Function} A function that will execute in the context of `thisObj`.
     * @see R.partial
     * @example
     *
     *      var log = R.bind(console.log, console);
     *      R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}
     *      // logs {a: 2}
     * @symb R.bind(f, o)(a, b) = f.call(o, a, b)
     */
    var bind = /*#__PURE__*/_curry2(function bind(fn, thisObj) {
      return _arity(fn.length, function () {
        return fn.apply(thisObj, arguments);
      });
    });

    function _arrayReduce(xf, acc, list) {
      var idx = 0;
      var len = list.length;
      while (idx < len) {
        acc = xf['@@transducer/step'](acc, list[idx]);
        if (acc && acc['@@transducer/reduced']) {
          acc = acc['@@transducer/value'];
          break;
        }
        idx += 1;
      }
      return xf['@@transducer/result'](acc);
    }

    function _iterableReduce(xf, acc, iter) {
      var step = iter.next();
      while (!step.done) {
        acc = xf['@@transducer/step'](acc, step.value);
        if (acc && acc['@@transducer/reduced']) {
          acc = acc['@@transducer/value'];
          break;
        }
        step = iter.next();
      }
      return xf['@@transducer/result'](acc);
    }

    function _methodReduce(xf, acc, obj, methodName) {
      return xf['@@transducer/result'](obj[methodName](bind(xf['@@transducer/step'], xf), acc));
    }

    var symIterator = typeof Symbol !== 'undefined' ? Symbol.iterator : '@@iterator';

    function _reduce(fn, acc, list) {
      if (typeof fn === 'function') {
        fn = _xwrap(fn);
      }
      if (_isArrayLike(list)) {
        return _arrayReduce(fn, acc, list);
      }
      if (typeof list['fantasy-land/reduce'] === 'function') {
        return _methodReduce(fn, acc, list, 'fantasy-land/reduce');
      }
      if (list[symIterator] != null) {
        return _iterableReduce(fn, acc, list[symIterator]());
      }
      if (typeof list.next === 'function') {
        return _iterableReduce(fn, acc, list);
      }
      if (typeof list.reduce === 'function') {
        return _methodReduce(fn, acc, list, 'reduce');
      }

      throw new TypeError('reduce: list must be array or iterable');
    }

    var XMap = /*#__PURE__*/function () {
      function XMap(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XMap.prototype['@@transducer/init'] = _xfBase.init;
      XMap.prototype['@@transducer/result'] = _xfBase.result;
      XMap.prototype['@@transducer/step'] = function (result, input) {
        return this.xf['@@transducer/step'](result, this.f(input));
      };

      return XMap;
    }();

    var _xmap = /*#__PURE__*/_curry2(function _xmap(f, xf) {
      return new XMap(f, xf);
    });

    function _has(prop, obj) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var toString = Object.prototype.toString;
    var _isArguments = function () {
      return toString.call(arguments) === '[object Arguments]' ? function _isArguments(x) {
        return toString.call(x) === '[object Arguments]';
      } : function _isArguments(x) {
        return _has('callee', x);
      };
    };

    // cover IE < 9 keys issues
    var hasEnumBug = ! /*#__PURE__*/{ toString: null }.propertyIsEnumerable('toString');
    var nonEnumerableProps = ['constructor', 'valueOf', 'isPrototypeOf', 'toString', 'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];
    // Safari bug
    var hasArgsEnumBug = /*#__PURE__*/function () {

      return arguments.propertyIsEnumerable('length');
    }();

    var contains = function contains(list, item) {
      var idx = 0;
      while (idx < list.length) {
        if (list[idx] === item) {
          return true;
        }
        idx += 1;
      }
      return false;
    };

    /**
     * Returns a list containing the names of all the enumerable own properties of
     * the supplied object.
     * Note that the order of the output array is not guaranteed to be consistent
     * across different JS platforms.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @sig {k: v} -> [k]
     * @param {Object} obj The object to extract properties from
     * @return {Array} An array of the object's own properties.
     * @see R.keysIn, R.values
     * @example
     *
     *      R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']
     */
    var _keys = typeof Object.keys === 'function' && !hasArgsEnumBug ? function keys(obj) {
      return Object(obj) !== obj ? [] : Object.keys(obj);
    } : function keys(obj) {
      if (Object(obj) !== obj) {
        return [];
      }
      var prop, nIdx;
      var ks = [];
      var checkArgsLength = hasArgsEnumBug && _isArguments(obj);
      for (prop in obj) {
        if (_has(prop, obj) && (!checkArgsLength || prop !== 'length')) {
          ks[ks.length] = prop;
        }
      }
      if (hasEnumBug) {
        nIdx = nonEnumerableProps.length - 1;
        while (nIdx >= 0) {
          prop = nonEnumerableProps[nIdx];
          if (_has(prop, obj) && !contains(ks, prop)) {
            ks[ks.length] = prop;
          }
          nIdx -= 1;
        }
      }
      return ks;
    };
    var keys = /*#__PURE__*/_curry1(_keys);

    /**
     * Takes a function and
     * a [functor](https://github.com/fantasyland/fantasy-land#functor),
     * applies the function to each of the functor's values, and returns
     * a functor of the same shape.
     *
     * Ramda provides suitable `map` implementations for `Array` and `Object`,
     * so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.
     *
     * Dispatches to the `map` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * Also treats functions as functors and will compose them together.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Functor f => (a -> b) -> f a -> f b
     * @param {Function} fn The function to be called on every element of the input `list`.
     * @param {Array} list The list to be iterated over.
     * @return {Array} The new list.
     * @see R.transduce, R.addIndex
     * @example
     *
     *      var double = x => x * 2;
     *
     *      R.map(double, [1, 2, 3]); //=> [2, 4, 6]
     *
     *      R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}
     * @symb R.map(f, [a, b]) = [f(a), f(b)]
     * @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }
     * @symb R.map(f, functor_o) = functor_o.map(f)
     */
    var map = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/map', 'map'], _xmap, function map(fn, functor) {
      switch (Object.prototype.toString.call(functor)) {
        case '[object Function]':
          return curryN(functor.length, function () {
            return fn.call(this, functor.apply(this, arguments));
          });
        case '[object Object]':
          return _reduce(function (acc, key) {
            acc[key] = fn(functor[key]);
            return acc;
          }, {}, keys(functor));
        default:
          return _map(fn, functor);
      }
    }));

    /**
     * Retrieve the value at a given path.
     *
     * @func
     * @memberOf R
     * @since v0.2.0
     * @category Object
     * @typedefn Idx = String | Int
     * @sig [Idx] -> {a} -> a | Undefined
     * @param {Array} path The path to use.
     * @param {Object} obj The object to retrieve the nested property from.
     * @return {*} The data at `path`.
     * @see R.prop
     * @example
     *
     *      R.path(['a', 'b'], {a: {b: 2}}); //=> 2
     *      R.path(['a', 'b'], {c: {b: 2}}); //=> undefined
     */
    var path = /*#__PURE__*/_curry2(function path(paths, obj) {
      var val = obj;
      var idx = 0;
      while (idx < paths.length) {
        if (val == null) {
          return;
        }
        val = val[paths[idx]];
        idx += 1;
      }
      return val;
    });

    /**
     * Returns a function that when supplied an object returns the indicated
     * property of that object, if it exists.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @sig s -> {s: a} -> a | Undefined
     * @param {String} p The property name
     * @param {Object} obj The object to query
     * @return {*} The value at `obj.p`.
     * @see R.path
     * @example
     *
     *      R.prop('x', {x: 100}); //=> 100
     *      R.prop('x', {}); //=> undefined
     */

    var prop = /*#__PURE__*/_curry2(function prop(p, obj) {
      return path([p], obj);
    });

    /**
     * Returns a new list by plucking the same named property off all objects in
     * the list supplied.
     *
     * `pluck` will work on
     * any [functor](https://github.com/fantasyland/fantasy-land#functor) in
     * addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Functor f => k -> f {k: v} -> f v
     * @param {Number|String} key The key name to pluck off of each object.
     * @param {Array} f The array or functor to consider.
     * @return {Array} The list of values for the given key.
     * @see R.props
     * @example
     *
     *      R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]
     *      R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]
     *      R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}
     * @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]
     * @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]
     */
    var pluck = /*#__PURE__*/_curry2(function pluck(p, list) {
      return map(prop(p), list);
    });

    /**
     * Returns a single item by iterating through the list, successively calling
     * the iterator function and passing it an accumulator value and the current
     * value from the array, and then passing the result to the next call.
     *
     * The iterator function receives two values: *(acc, value)*. It may use
     * [`R.reduced`](#reduced) to shortcut the iteration.
     *
     * The arguments' order of [`reduceRight`](#reduceRight)'s iterator function
     * is *(value, acc)*.
     *
     * Note: `R.reduce` does not skip deleted or unassigned indices (sparse
     * arrays), unlike the native `Array.prototype.reduce` method. For more details
     * on this behavior, see:
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description
     *
     * Dispatches to the `reduce` method of the third argument, if present. When
     * doing so, it is up to the user to handle the [`R.reduced`](#reduced)
     * shortcuting, as this is not implemented by `reduce`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig ((a, b) -> a) -> a -> [b] -> a
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array.
     * @param {*} acc The accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @see R.reduced, R.addIndex, R.reduceRight
     * @example
     *
     *      R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10
     *      //          -               -10
     *      //         / \              / \
     *      //        -   4           -6   4
     *      //       / \              / \
     *      //      -   3   ==>     -3   3
     *      //     / \              / \
     *      //    -   2           -1   2
     *      //   / \              / \
     *      //  0   1            0   1
     *
     * @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)
     */
    var reduce = /*#__PURE__*/_curry3(_reduce);

    /**
     * ap applies a list of functions to a list of values.
     *
     * Dispatches to the `ap` method of the second argument, if present. Also
     * treats curried functions as applicatives.
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category Function
     * @sig [a -> b] -> [a] -> [b]
     * @sig Apply f => f (a -> b) -> f a -> f b
     * @sig (a -> b -> c) -> (a -> b) -> (a -> c)
     * @param {*} applyF
     * @param {*} applyX
     * @return {*}
     * @example
     *
     *      R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]
     *      R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> ["tasty pizza", "tasty salad", "PIZZA", "SALAD"]
     *
     *      // R.ap can also be used as S combinator
     *      // when only two functions are passed
     *      R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'
     * @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]
     */
    var ap = /*#__PURE__*/_curry2(function ap(applyF, applyX) {
      return typeof applyX['fantasy-land/ap'] === 'function' ? applyX['fantasy-land/ap'](applyF) : typeof applyF.ap === 'function' ? applyF.ap(applyX) : typeof applyF === 'function' ? function (x) {
        return applyF(x)(applyX(x));
      } :
      // else
      _reduce(function (acc, f) {
        return _concat(acc, map(f, applyX));
      }, [], applyF);
    });

    /**
     * Determine if the passed argument is an integer.
     *
     * @private
     * @param {*} n
     * @category Type
     * @return {Boolean}
     */

    function _isFunction(x) {
      return Object.prototype.toString.call(x) === '[object Function]';
    }

    /**
     * "lifts" a function to be the specified arity, so that it may "map over" that
     * many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
     *
     * @func
     * @memberOf R
     * @since v0.7.0
     * @category Function
     * @sig Number -> (*... -> *) -> ([*]... -> [*])
     * @param {Function} fn The function to lift into higher context
     * @return {Function} The lifted function.
     * @see R.lift, R.ap
     * @example
     *
     *      var madd3 = R.liftN(3, (...args) => R.sum(args));
     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
     */
    var liftN = /*#__PURE__*/_curry2(function liftN(arity, fn) {
      var lifted = curryN(arity, fn);
      return curryN(arity, function () {
        return _reduce(ap, map(lifted, arguments[0]), Array.prototype.slice.call(arguments, 1));
      });
    });

    /**
     * "lifts" a function of arity > 1 so that it may "map over" a list, Function or other
     * object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).
     *
     * @func
     * @memberOf R
     * @since v0.7.0
     * @category Function
     * @sig (*... -> *) -> ([*]... -> [*])
     * @param {Function} fn The function to lift into higher context
     * @return {Function} The lifted function.
     * @see R.liftN
     * @example
     *
     *      var madd3 = R.lift((a, b, c) => a + b + c);
     *
     *      madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]
     *
     *      var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);
     *
     *      madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]
     */
    var lift = /*#__PURE__*/_curry1(function lift(fn) {
      return liftN(fn.length, fn);
    });

    /**
     * Returns a curried equivalent of the provided function. The curried function
     * has two unusual capabilities. First, its arguments needn't be provided one
     * at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the
     * following are equivalent:
     *
     *   - `g(1)(2)(3)`
     *   - `g(1)(2, 3)`
     *   - `g(1, 2)(3)`
     *   - `g(1, 2, 3)`
     *
     * Secondly, the special placeholder value [`R.__`](#__) may be used to specify
     * "gaps", allowing partial application of any combination of arguments,
     * regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),
     * the following are equivalent:
     *
     *   - `g(1, 2, 3)`
     *   - `g(_, 2, 3)(1)`
     *   - `g(_, _, 3)(1)(2)`
     *   - `g(_, _, 3)(1, 2)`
     *   - `g(_, 2)(1)(3)`
     *   - `g(_, 2)(1, 3)`
     *   - `g(_, 2)(_, 3)(1)`
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig (* -> a) -> (* -> a)
     * @param {Function} fn The function to curry.
     * @return {Function} A new, curried function.
     * @see R.curryN
     * @example
     *
     *      var addFourNumbers = (a, b, c, d) => a + b + c + d;
     *
     *      var curriedAddFourNumbers = R.curry(addFourNumbers);
     *      var f = curriedAddFourNumbers(1, 2);
     *      var g = f(3);
     *      g(4); //=> 10
     */
    var curry = /*#__PURE__*/_curry1(function curry(fn) {
      return curryN(fn.length, fn);
    });

    /**
     * Returns the result of calling its first argument with the remaining
     * arguments. This is occasionally useful as a converging function for
     * [`R.converge`](#converge): the first branch can produce a function while the
     * remaining branches produce values to be passed to that function as its
     * arguments.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Function
     * @sig (*... -> a),*... -> a
     * @param {Function} fn The function to apply to the remaining arguments.
     * @param {...*} args Any number of positional arguments.
     * @return {*}
     * @see R.apply
     * @example
     *
     *      R.call(R.add, 1, 2); //=> 3
     *
     *      var indentN = R.pipe(R.repeat(' '),
     *                           R.join(''),
     *                           R.replace(/^(?!$)/gm));
     *
     *      var format = R.converge(R.call, [
     *                                  R.pipe(R.prop('indent'), indentN),
     *                                  R.prop('value')
     *                              ]);
     *
     *      format({indent: 2, value: 'foo\nbar\nbaz\n'}); //=> '  foo\n  bar\n  baz\n'
     * @symb R.call(f, a, b) = f(a, b)
     */
    var call = /*#__PURE__*/curry(function call(fn) {
      return fn.apply(this, Array.prototype.slice.call(arguments, 1));
    });

    /**
     * `_makeFlat` is a helper function that returns a one-level or fully recursive
     * function based on the flag passed in.
     *
     * @private
     */
    function _makeFlat(recursive) {
      return function flatt(list) {
        var value, jlen, j;
        var result = [];
        var idx = 0;
        var ilen = list.length;

        while (idx < ilen) {
          if (_isArrayLike(list[idx])) {
            value = recursive ? flatt(list[idx]) : list[idx];
            j = 0;
            jlen = value.length;
            while (j < jlen) {
              result[result.length] = value[j];
              j += 1;
            }
          } else {
            result[result.length] = list[idx];
          }
          idx += 1;
        }
        return result;
      };
    }

    function _forceReduced(x) {
      return {
        '@@transducer/value': x,
        '@@transducer/reduced': true
      };
    }

    var preservingReduced = function (xf) {
      return {
        '@@transducer/init': _xfBase.init,
        '@@transducer/result': function (result) {
          return xf['@@transducer/result'](result);
        },
        '@@transducer/step': function (result, input) {
          var ret = xf['@@transducer/step'](result, input);
          return ret['@@transducer/reduced'] ? _forceReduced(ret) : ret;
        }
      };
    };

    var _flatCat = function _xcat(xf) {
      var rxf = preservingReduced(xf);
      return {
        '@@transducer/init': _xfBase.init,
        '@@transducer/result': function (result) {
          return rxf['@@transducer/result'](result);
        },
        '@@transducer/step': function (result, input) {
          return !_isArrayLike(input) ? _reduce(rxf, result, [input]) : _reduce(rxf, result, input);
        }
      };
    };

    var _xchain = /*#__PURE__*/_curry2(function _xchain(f, xf) {
      return map(f, _flatCat(xf));
    });

    /**
     * `chain` maps a function over a list and concatenates the results. `chain`
     * is also known as `flatMap` in some libraries
     *
     * Dispatches to the `chain` method of the second argument, if present,
     * according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category List
     * @sig Chain m => (a -> m b) -> m a -> m b
     * @param {Function} fn The function to map with
     * @param {Array} list The list to map over
     * @return {Array} The result of flat-mapping `list` with `fn`
     * @example
     *
     *      var duplicate = n => [n, n];
     *      R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]
     *
     *      R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]
     */
    var chain = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['fantasy-land/chain', 'chain'], _xchain, function chain(fn, monad) {
      if (typeof monad === 'function') {
        return function (x) {
          return fn(monad(x))(x);
        };
      }
      return _makeFlat(false)(map(fn, monad));
    }));

    /**
     * Gives a single-word string description of the (native) type of a value,
     * returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not
     * attempt to distinguish user Object types any further, reporting them all as
     * 'Object'.
     *
     * @func
     * @memberOf R
     * @since v0.8.0
     * @category Type
     * @sig (* -> {*}) -> String
     * @param {*} val The value to test
     * @return {String}
     * @example
     *
     *      R.type({}); //=> "Object"
     *      R.type(1); //=> "Number"
     *      R.type(false); //=> "Boolean"
     *      R.type('s'); //=> "String"
     *      R.type(null); //=> "Null"
     *      R.type([]); //=> "Array"
     *      R.type(/[A-z]/); //=> "RegExp"
     *      R.type(() => {}); //=> "Function"
     *      R.type(undefined); //=> "Undefined"
     */
    var type = /*#__PURE__*/_curry1(function type(val) {
      return val === null ? 'Null' : val === undefined ? 'Undefined' : Object.prototype.toString.call(val).slice(8, -1);
    });

    /**
     * A function that returns the `!` of its argument. It will return `true` when
     * passed false-y value, and `false` when passed a truth-y one.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Logic
     * @sig * -> Boolean
     * @param {*} a any value
     * @return {Boolean} the logical inverse of passed argument.
     * @see R.complement
     * @example
     *
     *      R.not(true); //=> false
     *      R.not(false); //=> true
     *      R.not(0); //=> true
     *      R.not(1); //=> false
     */
    var not = /*#__PURE__*/_curry1(function not(a) {
      return !a;
    });

    /**
     * Takes a function `f` and returns a function `g` such that if called with the same arguments
     * when `f` returns a "truthy" value, `g` returns `false` and when `f` returns a "falsy" value `g` returns `true`.
     *
     * `R.complement` may be applied to any functor
     *
     * @func
     * @memberOf R
     * @since v0.12.0
     * @category Logic
     * @sig (*... -> *) -> (*... -> Boolean)
     * @param {Function} f
     * @return {Function}
     * @see R.not
     * @example
     *
     *      var isNotNil = R.complement(R.isNil);
     *      isNil(null); //=> true
     *      isNotNil(null); //=> false
     *      isNil(7); //=> false
     *      isNotNil(7); //=> true
     */
    var complement = /*#__PURE__*/lift(not);

    function _pipe(f, g) {
      return function () {
        return g.call(this, f.apply(this, arguments));
      };
    }

    /**
     * This checks whether a function has a [methodname] function. If it isn't an
     * array it will execute that function otherwise it will default to the ramda
     * implementation.
     *
     * @private
     * @param {Function} fn ramda implemtation
     * @param {String} methodname property to check for a custom implementation
     * @return {Object} Whatever the return value of the method is.
     */
    function _checkForMethod(methodname, fn) {
      return function () {
        var length = arguments.length;
        if (length === 0) {
          return fn();
        }
        var obj = arguments[length - 1];
        return _isArray(obj) || typeof obj[methodname] !== 'function' ? fn.apply(this, arguments) : obj[methodname].apply(obj, Array.prototype.slice.call(arguments, 0, length - 1));
      };
    }

    /**
     * Returns the elements of the given list or string (or object with a `slice`
     * method) from `fromIndex` (inclusive) to `toIndex` (exclusive).
     *
     * Dispatches to the `slice` method of the third argument, if present.
     *
     * @func
     * @memberOf R
     * @since v0.1.4
     * @category List
     * @sig Number -> Number -> [a] -> [a]
     * @sig Number -> Number -> String -> String
     * @param {Number} fromIndex The start index (inclusive).
     * @param {Number} toIndex The end index (exclusive).
     * @param {*} list
     * @return {*}
     * @example
     *
     *      R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']
     *      R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']
     *      R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']
     *      R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']
     *      R.slice(0, 3, 'ramda');                     //=> 'ram'
     */
    var slice = /*#__PURE__*/_curry3( /*#__PURE__*/_checkForMethod('slice', function slice(fromIndex, toIndex, list) {
      return Array.prototype.slice.call(list, fromIndex, toIndex);
    }));

    /**
     * Returns all but the first element of the given list or string (or object
     * with a `tail` method).
     *
     * Dispatches to the `slice` method of the first argument, if present.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [a]
     * @sig String -> String
     * @param {*} list
     * @return {*}
     * @see R.head, R.init, R.last
     * @example
     *
     *      R.tail([1, 2, 3]);  //=> [2, 3]
     *      R.tail([1, 2]);     //=> [2]
     *      R.tail([1]);        //=> []
     *      R.tail([]);         //=> []
     *
     *      R.tail('abc');  //=> 'bc'
     *      R.tail('ab');   //=> 'b'
     *      R.tail('a');    //=> ''
     *      R.tail('');     //=> ''
     */
    var tail = /*#__PURE__*/_curry1( /*#__PURE__*/_checkForMethod('tail', /*#__PURE__*/slice(1, Infinity)));

    /**
     * Performs left-to-right function composition. The leftmost function may have
     * any arity; the remaining functions must be unary.
     *
     * In some libraries this function is named `sequence`.
     *
     * **Note:** The result of pipe is not automatically curried.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)
     * @param {...Function} functions
     * @return {Function}
     * @see R.compose
     * @example
     *
     *      var f = R.pipe(Math.pow, R.negate, R.inc);
     *
     *      f(3, 4); // -(3^4) + 1
     * @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))
     */
    function pipe() {
      if (arguments.length === 0) {
        throw new Error('pipe requires at least one argument');
      }
      return _arity(arguments[0].length, reduce(_pipe, arguments[0], tail(arguments)));
    }

    /**
     * Returns a new list or string with the elements or characters in reverse
     * order.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [a]
     * @sig String -> String
     * @param {Array|String} list
     * @return {Array|String}
     * @example
     *
     *      R.reverse([1, 2, 3]);  //=> [3, 2, 1]
     *      R.reverse([1, 2]);     //=> [2, 1]
     *      R.reverse([1]);        //=> [1]
     *      R.reverse([]);         //=> []
     *
     *      R.reverse('abc');      //=> 'cba'
     *      R.reverse('ab');       //=> 'ba'
     *      R.reverse('a');        //=> 'a'
     *      R.reverse('');         //=> ''
     */
    var reverse = /*#__PURE__*/_curry1(function reverse(list) {
      return _isString(list) ? list.split('').reverse().join('') : Array.prototype.slice.call(list, 0).reverse();
    });

    /**
     * Performs right-to-left function composition. The rightmost function may have
     * any arity; the remaining functions must be unary.
     *
     * **Note:** The result of compose is not automatically curried.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)
     * @param {...Function} ...functions The functions to compose
     * @return {Function}
     * @see R.pipe
     * @example
     *
     *      var classyGreeting = (firstName, lastName) => "The name's " + lastName + ", " + firstName + " " + lastName
     *      var yellGreeting = R.compose(R.toUpper, classyGreeting);
     *      yellGreeting('James', 'Bond'); //=> "THE NAME'S BOND, JAMES BOND"
     *
     *      R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7
     *
     * @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))
     */
    function compose() {
      if (arguments.length === 0) {
        throw new Error('compose requires at least one argument');
      }
      return pipe.apply(this, reverse(arguments));
    }

    function _arrayFromIterator(iter) {
      var list = [];
      var next;
      while (!(next = iter.next()).done) {
        list.push(next.value);
      }
      return list;
    }

    function _containsWith(pred, x, list) {
      var idx = 0;
      var len = list.length;

      while (idx < len) {
        if (pred(x, list[idx])) {
          return true;
        }
        idx += 1;
      }
      return false;
    }

    function _functionName(f) {
      // String(x => x) evaluates to "x => x", so the pattern may not match.
      var match = String(f).match(/^function (\w*)/);
      return match == null ? '' : match[1];
    }

    /**
     * Returns true if its arguments are identical, false otherwise. Values are
     * identical if they reference the same memory. `NaN` is identical to `NaN`;
     * `0` and `-0` are not identical.
     *
     * @func
     * @memberOf R
     * @since v0.15.0
     * @category Relation
     * @sig a -> a -> Boolean
     * @param {*} a
     * @param {*} b
     * @return {Boolean}
     * @example
     *
     *      var o = {};
     *      R.identical(o, o); //=> true
     *      R.identical(1, 1); //=> true
     *      R.identical(1, '1'); //=> false
     *      R.identical([], []); //=> false
     *      R.identical(0, -0); //=> false
     *      R.identical(NaN, NaN); //=> true
     */
    var identical = /*#__PURE__*/_curry2(function identical(a, b) {
      // SameValue algorithm
      if (a === b) {
        // Steps 1-5, 7-10
        // Steps 6.b-6.e: +0 != -0
        return a !== 0 || 1 / a === 1 / b;
      } else {
        // Step 6.a: NaN == NaN
        return a !== a && b !== b;
      }
    });

    /**
     * private _uniqContentEquals function.
     * That function is checking equality of 2 iterator contents with 2 assumptions
     * - iterators lengths are the same
     * - iterators values are unique
     *
     * false-positive result will be returned for comparision of, e.g.
     * - [1,2,3] and [1,2,3,4]
     * - [1,1,1] and [1,2,3]
     * */

    function _uniqContentEquals(aIterator, bIterator, stackA, stackB) {
      var a = _arrayFromIterator(aIterator);
      var b = _arrayFromIterator(bIterator);

      function eq(_a, _b) {
        return _equals(_a, _b, stackA.slice(), stackB.slice());
      }

      // if *a* array contains any element that is not included in *b*
      return !_containsWith(function (b, aItem) {
        return !_containsWith(eq, aItem, b);
      }, b, a);
    }

    function _equals(a, b, stackA, stackB) {
      if (identical(a, b)) {
        return true;
      }

      var typeA = type(a);

      if (typeA !== type(b)) {
        return false;
      }

      if (a == null || b == null) {
        return false;
      }

      if (typeof a['fantasy-land/equals'] === 'function' || typeof b['fantasy-land/equals'] === 'function') {
        return typeof a['fantasy-land/equals'] === 'function' && a['fantasy-land/equals'](b) && typeof b['fantasy-land/equals'] === 'function' && b['fantasy-land/equals'](a);
      }

      if (typeof a.equals === 'function' || typeof b.equals === 'function') {
        return typeof a.equals === 'function' && a.equals(b) && typeof b.equals === 'function' && b.equals(a);
      }

      switch (typeA) {
        case 'Arguments':
        case 'Array':
        case 'Object':
          if (typeof a.constructor === 'function' && _functionName(a.constructor) === 'Promise') {
            return a === b;
          }
          break;
        case 'Boolean':
        case 'Number':
        case 'String':
          if (!(typeof a === typeof b && identical(a.valueOf(), b.valueOf()))) {
            return false;
          }
          break;
        case 'Date':
          if (!identical(a.valueOf(), b.valueOf())) {
            return false;
          }
          break;
        case 'Error':
          return a.name === b.name && a.message === b.message;
        case 'RegExp':
          if (!(a.source === b.source && a.global === b.global && a.ignoreCase === b.ignoreCase && a.multiline === b.multiline && a.sticky === b.sticky && a.unicode === b.unicode)) {
            return false;
          }
          break;
      }

      var idx = stackA.length - 1;
      while (idx >= 0) {
        if (stackA[idx] === a) {
          return stackB[idx] === b;
        }
        idx -= 1;
      }

      switch (typeA) {
        case 'Map':
          if (a.size !== b.size) {
            return false;
          }

          return _uniqContentEquals(a.entries(), b.entries(), stackA.concat([a]), stackB.concat([b]));
        case 'Set':
          if (a.size !== b.size) {
            return false;
          }

          return _uniqContentEquals(a.values(), b.values(), stackA.concat([a]), stackB.concat([b]));
        case 'Arguments':
        case 'Array':
        case 'Object':
        case 'Boolean':
        case 'Number':
        case 'String':
        case 'Date':
        case 'Error':
        case 'RegExp':
        case 'Int8Array':
        case 'Uint8Array':
        case 'Uint8ClampedArray':
        case 'Int16Array':
        case 'Uint16Array':
        case 'Int32Array':
        case 'Uint32Array':
        case 'Float32Array':
        case 'Float64Array':
        case 'ArrayBuffer':
          break;
        default:
          // Values of other types are only equal if identical.
          return false;
      }

      var keysA = keys(a);
      if (keysA.length !== keys(b).length) {
        return false;
      }

      var extendedStackA = stackA.concat([a]);
      var extendedStackB = stackB.concat([b]);

      idx = keysA.length - 1;
      while (idx >= 0) {
        var key = keysA[idx];
        if (!(_has(key, b) && _equals(b[key], a[key], extendedStackA, extendedStackB))) {
          return false;
        }
        idx -= 1;
      }
      return true;
    }

    /**
     * Returns `true` if its arguments are equivalent, `false` otherwise. Handles
     * cyclical data structures.
     *
     * Dispatches symmetrically to the `equals` methods of both arguments, if
     * present.
     *
     * @func
     * @memberOf R
     * @since v0.15.0
     * @category Relation
     * @sig a -> b -> Boolean
     * @param {*} a
     * @param {*} b
     * @return {Boolean}
     * @example
     *
     *      R.equals(1, 1); //=> true
     *      R.equals(1, '1'); //=> false
     *      R.equals([1, 2, 3], [1, 2, 3]); //=> true
     *
     *      var a = {}; a.v = a;
     *      var b = {}; b.v = b;
     *      R.equals(a, b); //=> true
     */
    var equals = /*#__PURE__*/_curry2(function equals(a, b) {
      return _equals(a, b, [], []);
    });

    function _indexOf(list, a, idx) {
      var inf, item;
      // Array.prototype.indexOf doesn't exist below IE9
      if (typeof list.indexOf === 'function') {
        switch (typeof a) {
          case 'number':
            if (a === 0) {
              // manually crawl the list to distinguish between +0 and -0
              inf = 1 / a;
              while (idx < list.length) {
                item = list[idx];
                if (item === 0 && 1 / item === inf) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            } else if (a !== a) {
              // NaN
              while (idx < list.length) {
                item = list[idx];
                if (typeof item === 'number' && item !== item) {
                  return idx;
                }
                idx += 1;
              }
              return -1;
            }
            // non-zero numbers can utilise Set
            return list.indexOf(a, idx);

          // all these types can utilise Set
          case 'string':
          case 'boolean':
          case 'function':
          case 'undefined':
            return list.indexOf(a, idx);

          case 'object':
            if (a === null) {
              // null can utilise Set
              return list.indexOf(a, idx);
            }
        }
      }
      // anything else not covered above, defer to R.equals
      while (idx < list.length) {
        if (equals(list[idx], a)) {
          return idx;
        }
        idx += 1;
      }
      return -1;
    }

    function _contains(a, list) {
      return _indexOf(list, a, 0) >= 0;
    }

    function _quote(s) {
      var escaped = s.replace(/\\/g, '\\\\').replace(/[\b]/g, '\\b') // \b matches word boundary; [\b] matches backspace
      .replace(/\f/g, '\\f').replace(/\n/g, '\\n').replace(/\r/g, '\\r').replace(/\t/g, '\\t').replace(/\v/g, '\\v').replace(/\0/g, '\\0');

      return '"' + escaped.replace(/"/g, '\\"') + '"';
    }

    /**
     * Polyfill from <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString>.
     */
    var pad = function pad(n) {
      return (n < 10 ? '0' : '') + n;
    };

    var _toISOString = typeof Date.prototype.toISOString === 'function' ? function _toISOString(d) {
      return d.toISOString();
    } : function _toISOString(d) {
      return d.getUTCFullYear() + '-' + pad(d.getUTCMonth() + 1) + '-' + pad(d.getUTCDate()) + 'T' + pad(d.getUTCHours()) + ':' + pad(d.getUTCMinutes()) + ':' + pad(d.getUTCSeconds()) + '.' + (d.getUTCMilliseconds() / 1000).toFixed(3).slice(2, 5) + 'Z';
    };

    function _complement(f) {
      return function () {
        return !f.apply(this, arguments);
      };
    }

    function _filter(fn, list) {
      var idx = 0;
      var len = list.length;
      var result = [];

      while (idx < len) {
        if (fn(list[idx])) {
          result[result.length] = list[idx];
        }
        idx += 1;
      }
      return result;
    }

    function _isObject(x) {
      return Object.prototype.toString.call(x) === '[object Object]';
    }

    var XFilter = /*#__PURE__*/function () {
      function XFilter(f, xf) {
        this.xf = xf;
        this.f = f;
      }
      XFilter.prototype['@@transducer/init'] = _xfBase.init;
      XFilter.prototype['@@transducer/result'] = _xfBase.result;
      XFilter.prototype['@@transducer/step'] = function (result, input) {
        return this.f(input) ? this.xf['@@transducer/step'](result, input) : result;
      };

      return XFilter;
    }();

    var _xfilter = /*#__PURE__*/_curry2(function _xfilter(f, xf) {
      return new XFilter(f, xf);
    });

    /**
     * Takes a predicate and a `Filterable`, and returns a new filterable of the
     * same type containing the members of the given filterable which satisfy the
     * given predicate. Filterable objects include plain objects or any object
     * that has a filter method such as `Array`.
     *
     * Dispatches to the `filter` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> f a
     * @param {Function} pred
     * @param {Array} filterable
     * @return {Array} Filterable
     * @see R.reject, R.transduce, R.addIndex
     * @example
     *
     *      var isEven = n => n % 2 === 0;
     *
     *      R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]
     *
     *      R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
     */
    var filter = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable(['filter'], _xfilter, function (pred, filterable) {
      return _isObject(filterable) ? _reduce(function (acc, key) {
        if (pred(filterable[key])) {
          acc[key] = filterable[key];
        }
        return acc;
      }, {}, keys(filterable)) :
      // else
      _filter(pred, filterable);
    }));

    /**
     * The complement of [`filter`](#filter).
     *
     * Acts as a transducer if a transformer is given in list position. Filterable
     * objects include plain objects or any object that has a filter method such
     * as `Array`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> f a
     * @param {Function} pred
     * @param {Array} filterable
     * @return {Array}
     * @see R.filter, R.transduce, R.addIndex
     * @example
     *
     *      var isOdd = (n) => n % 2 === 1;
     *
     *      R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]
     *
     *      R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}
     */
    var reject = /*#__PURE__*/_curry2(function reject(pred, filterable) {
      return filter(_complement(pred), filterable);
    });

    function _toString(x, seen) {
      var recur = function recur(y) {
        var xs = seen.concat([x]);
        return _contains(y, xs) ? '<Circular>' : _toString(y, xs);
      };

      //  mapPairs :: (Object, [String]) -> [String]
      var mapPairs = function (obj, keys$$1) {
        return _map(function (k) {
          return _quote(k) + ': ' + recur(obj[k]);
        }, keys$$1.slice().sort());
      };

      switch (Object.prototype.toString.call(x)) {
        case '[object Arguments]':
          return '(function() { return arguments; }(' + _map(recur, x).join(', ') + '))';
        case '[object Array]':
          return '[' + _map(recur, x).concat(mapPairs(x, reject(function (k) {
            return (/^\d+$/.test(k)
            );
          }, keys(x)))).join(', ') + ']';
        case '[object Boolean]':
          return typeof x === 'object' ? 'new Boolean(' + recur(x.valueOf()) + ')' : x.toString();
        case '[object Date]':
          return 'new Date(' + (isNaN(x.valueOf()) ? recur(NaN) : _quote(_toISOString(x))) + ')';
        case '[object Null]':
          return 'null';
        case '[object Number]':
          return typeof x === 'object' ? 'new Number(' + recur(x.valueOf()) + ')' : 1 / x === -Infinity ? '-0' : x.toString(10);
        case '[object String]':
          return typeof x === 'object' ? 'new String(' + recur(x.valueOf()) + ')' : _quote(x);
        case '[object Undefined]':
          return 'undefined';
        default:
          if (typeof x.toString === 'function') {
            var repr = x.toString();
            if (repr !== '[object Object]') {
              return repr;
            }
          }
          return '{' + mapPairs(x, keys(x)).join(', ') + '}';
      }
    }

    /**
     * Returns the string representation of the given value. `eval`'ing the output
     * should result in a value equivalent to the input value. Many of the built-in
     * `toString` methods do not satisfy this requirement.
     *
     * If the given value is an `[object Object]` with a `toString` method other
     * than `Object.prototype.toString`, this method is invoked with no arguments
     * to produce the return value. This means user-defined constructor functions
     * can provide a suitable `toString` method. For example:
     *
     *     function Point(x, y) {
     *       this.x = x;
     *       this.y = y;
     *     }
     *
     *     Point.prototype.toString = function() {
     *       return 'new Point(' + this.x + ', ' + this.y + ')';
     *     };
     *
     *     R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'
     *
     * @func
     * @memberOf R
     * @since v0.14.0
     * @category String
     * @sig * -> String
     * @param {*} val
     * @return {String}
     * @example
     *
     *      R.toString(42); //=> '42'
     *      R.toString('abc'); //=> '"abc"'
     *      R.toString([1, 2, 3]); //=> '[1, 2, 3]'
     *      R.toString({foo: 1, bar: 2, baz: 3}); //=> '{"bar": 2, "baz": 3, "foo": 1}'
     *      R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date("2001-02-03T04:05:06.000Z")'
     */
    var toString$1 = /*#__PURE__*/_curry1(function toString(val) {
      return _toString(val, []);
    });

    /**
     * Returns the result of concatenating the given lists or strings.
     *
     * Note: `R.concat` expects both arguments to be of the same type,
     * unlike the native `Array.prototype.concat` method. It will throw
     * an error if you `concat` an Array with a non-Array value.
     *
     * Dispatches to the `concat` method of the first argument, if present.
     * Can also concatenate two members of a [fantasy-land
     * compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [a] -> [a]
     * @sig String -> String -> String
     * @param {Array|String} firstList The first list
     * @param {Array|String} secondList The second list
     * @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of
     * `secondList`.
     *
     * @example
     *
     *      R.concat('ABC', 'DEF'); // 'ABCDEF'
     *      R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]
     *      R.concat([], []); //=> []
     */
    var concat = /*#__PURE__*/_curry2(function concat(a, b) {
      if (_isArray(a)) {
        if (_isArray(b)) {
          return a.concat(b);
        }
        throw new TypeError(toString$1(b) + ' is not an array');
      }
      if (_isString(a)) {
        if (_isString(b)) {
          return a + b;
        }
        throw new TypeError(toString$1(b) + ' is not a string');
      }
      if (a != null && _isFunction(a['fantasy-land/concat'])) {
        return a['fantasy-land/concat'](b);
      }
      if (a != null && _isFunction(a.concat)) {
        return a.concat(b);
      }
      throw new TypeError(toString$1(a) + ' does not have a method named "concat" or "fantasy-land/concat"');
    });

    /**
     * Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.
     * `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments
     * to `fn` are applied to each of the predicates in turn until one returns a
     * "truthy" value, at which point `fn` returns the result of applying its
     * arguments to the corresponding transformer. If none of the predicates
     * matches, `fn` returns undefined.
     *
     * @func
     * @memberOf R
     * @since v0.6.0
     * @category Logic
     * @sig [[(*... -> Boolean),(*... -> *)]] -> (*... -> *)
     * @param {Array} pairs A list of [predicate, transformer]
     * @return {Function}
     * @example
     *
     *      var fn = R.cond([
     *        [R.equals(0),   R.always('water freezes at 0°C')],
     *        [R.equals(100), R.always('water boils at 100°C')],
     *        [R.T,           temp => 'nothing special happens at ' + temp + '°C']
     *      ]);
     *      fn(0); //=> 'water freezes at 0°C'
     *      fn(50); //=> 'nothing special happens at 50°C'
     *      fn(100); //=> 'water boils at 100°C'
     */
    var cond = /*#__PURE__*/_curry1(function cond(pairs) {
      var arity = reduce(max, 0, map(function (pair) {
        return pair[0].length;
      }, pairs));
      return _arity(arity, function () {
        var idx = 0;
        while (idx < pairs.length) {
          if (pairs[idx][0].apply(this, arguments)) {
            return pairs[idx][1].apply(this, arguments);
          }
          idx += 1;
        }
      });
    });

    /**
     * Accepts a converging function and a list of branching functions and returns
     * a new function. When invoked, this new function is applied to some
     * arguments, each branching function is applied to those same arguments. The
     * results of each branching function are passed as arguments to the converging
     * function to produce the return value.
     *
     * @func
     * @memberOf R
     * @since v0.4.2
     * @category Function
     * @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)
     * @param {Function} after A function. `after` will be invoked with the return values of
     *        `fn1` and `fn2` as its arguments.
     * @param {Array} functions A list of functions.
     * @return {Function} A new function.
     * @see R.useWith
     * @example
     *
     *      var average = R.converge(R.divide, [R.sum, R.length])
     *      average([1, 2, 3, 4, 5, 6, 7]) //=> 4
     *
     *      var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])
     *      strangeConcat("Yodel") //=> "YODELyodel"
     *
     * @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))
     */
    var converge = /*#__PURE__*/_curry2(function converge(after, fns) {
      return curryN(reduce(max, 0, pluck('length', fns)), function () {
        var args = arguments;
        var context = this;
        return after.apply(context, _map(function (fn) {
          return fn.apply(context, args);
        }, fns));
      });
    });

    var XReduceBy = /*#__PURE__*/function () {
      function XReduceBy(valueFn, valueAcc, keyFn, xf) {
        this.valueFn = valueFn;
        this.valueAcc = valueAcc;
        this.keyFn = keyFn;
        this.xf = xf;
        this.inputs = {};
      }
      XReduceBy.prototype['@@transducer/init'] = _xfBase.init;
      XReduceBy.prototype['@@transducer/result'] = function (result) {
        var key;
        for (key in this.inputs) {
          if (_has(key, this.inputs)) {
            result = this.xf['@@transducer/step'](result, this.inputs[key]);
            if (result['@@transducer/reduced']) {
              result = result['@@transducer/value'];
              break;
            }
          }
        }
        this.inputs = null;
        return this.xf['@@transducer/result'](result);
      };
      XReduceBy.prototype['@@transducer/step'] = function (result, input) {
        var key = this.keyFn(input);
        this.inputs[key] = this.inputs[key] || [key, this.valueAcc];
        this.inputs[key][1] = this.valueFn(this.inputs[key][1], input);
        return result;
      };

      return XReduceBy;
    }();

    var _xreduceBy = /*#__PURE__*/_curryN(4, [], function _xreduceBy(valueFn, valueAcc, keyFn, xf) {
      return new XReduceBy(valueFn, valueAcc, keyFn, xf);
    });

    /**
     * Groups the elements of the list according to the result of calling
     * the String-returning function `keyFn` on each element and reduces the elements
     * of each group to a single value via the reducer function `valueFn`.
     *
     * This function is basically a more general [`groupBy`](#groupBy) function.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.20.0
     * @category List
     * @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}
     * @param {Function} valueFn The function that reduces the elements of each group to a single
     *        value. Receives two values, accumulator for a particular group and the current element.
     * @param {*} acc The (initial) accumulator value for each group.
     * @param {Function} keyFn The function that maps the list's element into a key.
     * @param {Array} list The array to group.
     * @return {Object} An object with the output of `keyFn` for keys, mapped to the output of
     *         `valueFn` for elements which produced that key when passed to `keyFn`.
     * @see R.groupBy, R.reduce
     * @example
     *
     *      var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);
     *      var namesByGrade = reduceToNamesBy(function(student) {
     *        var score = student.score;
     *        return score < 65 ? 'F' :
     *               score < 70 ? 'D' :
     *               score < 80 ? 'C' :
     *               score < 90 ? 'B' : 'A';
     *      });
     *      var students = [{name: 'Lucy', score: 92},
     *                      {name: 'Drew', score: 85},
     *                      // ...
     *                      {name: 'Bart', score: 62}];
     *      namesByGrade(students);
     *      // {
     *      //   'A': ['Lucy'],
     *      //   'B': ['Drew']
     *      //   // ...,
     *      //   'F': ['Bart']
     *      // }
     */
    var reduceBy = /*#__PURE__*/_curryN(4, [], /*#__PURE__*/_dispatchable([], _xreduceBy, function reduceBy(valueFn, valueAcc, keyFn, list) {
      return _reduce(function (acc, elt) {
        var key = keyFn(elt);
        acc[key] = valueFn(_has(key, acc) ? acc[key] : valueAcc, elt);
        return acc;
      }, {}, list);
    }));

    /**
     * Counts the elements of a list according to how many match each value of a
     * key generated by the supplied function. Returns an object mapping the keys
     * produced by `fn` to the number of occurrences in the list. Note that all
     * keys are coerced to strings because of how JavaScript objects work.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Relation
     * @sig (a -> String) -> [a] -> {*}
     * @param {Function} fn The function used to map values to keys.
     * @param {Array} list The list to count elements from.
     * @return {Object} An object mapping keys to number of occurrences in the list.
     * @example
     *
     *      var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];
     *      R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}
     *
     *      var letters = ['a', 'b', 'A', 'a', 'B', 'c'];
     *      R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}
     */
    var countBy = /*#__PURE__*/reduceBy(function (acc, elem) {
      return acc + 1;
    }, 0);

    /**
     * Decrements its argument.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Math
     * @sig Number -> Number
     * @param {Number} n
     * @return {Number} n - 1
     * @see R.inc
     * @example
     *
     *      R.dec(42); //=> 41
     */
    var dec = /*#__PURE__*/add(-1);

    /**
     * Returns the second argument if it is not `null`, `undefined` or `NaN`;
     * otherwise the first argument is returned.
     *
     * @func
     * @memberOf R
     * @since v0.10.0
     * @category Logic
     * @sig a -> b -> a | b
     * @param {a} default The default value.
     * @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.
     * @return {*} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value
     * @example
     *
     *      var defaultTo42 = R.defaultTo(42);
     *
     *      defaultTo42(null);  //=> 42
     *      defaultTo42(undefined);  //=> 42
     *      defaultTo42('Ramda');  //=> 'Ramda'
     *      // parseInt('string') results in NaN
     *      defaultTo42(parseInt('string')); //=> 42
     */
    var defaultTo = /*#__PURE__*/_curry2(function defaultTo(d, v) {
      return v == null || v !== v ? d : v;
    });

    var XDropRepeatsWith = /*#__PURE__*/function () {
      function XDropRepeatsWith(pred, xf) {
        this.xf = xf;
        this.pred = pred;
        this.lastValue = undefined;
        this.seenFirstValue = false;
      }

      XDropRepeatsWith.prototype['@@transducer/init'] = _xfBase.init;
      XDropRepeatsWith.prototype['@@transducer/result'] = _xfBase.result;
      XDropRepeatsWith.prototype['@@transducer/step'] = function (result, input) {
        var sameAsLast = false;
        if (!this.seenFirstValue) {
          this.seenFirstValue = true;
        } else if (this.pred(this.lastValue, input)) {
          sameAsLast = true;
        }
        this.lastValue = input;
        return sameAsLast ? result : this.xf['@@transducer/step'](result, input);
      };

      return XDropRepeatsWith;
    }();

    var _xdropRepeatsWith = /*#__PURE__*/_curry2(function _xdropRepeatsWith(pred, xf) {
      return new XDropRepeatsWith(pred, xf);
    });

    /**
     * Returns the nth element of the given list or string. If n is negative the
     * element at index length + n is returned.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig Number -> [a] -> a | Undefined
     * @sig Number -> String -> String
     * @param {Number} offset
     * @param {*} list
     * @return {*}
     * @example
     *
     *      var list = ['foo', 'bar', 'baz', 'quux'];
     *      R.nth(1, list); //=> 'bar'
     *      R.nth(-1, list); //=> 'quux'
     *      R.nth(-99, list); //=> undefined
     *
     *      R.nth(2, 'abc'); //=> 'c'
     *      R.nth(3, 'abc'); //=> ''
     * @symb R.nth(-1, [a, b, c]) = c
     * @symb R.nth(0, [a, b, c]) = a
     * @symb R.nth(1, [a, b, c]) = b
     */
    var nth = /*#__PURE__*/_curry2(function nth(offset, list) {
      var idx = offset < 0 ? list.length + offset : offset;
      return _isString(list) ? list.charAt(idx) : list[idx];
    });

    /**
     * Returns the last element of the given list or string.
     *
     * @func
     * @memberOf R
     * @since v0.1.4
     * @category List
     * @sig [a] -> a | Undefined
     * @sig String -> String
     * @param {*} list
     * @return {*}
     * @see R.init, R.head, R.tail
     * @example
     *
     *      R.last(['fi', 'fo', 'fum']); //=> 'fum'
     *      R.last([]); //=> undefined
     *
     *      R.last('abc'); //=> 'c'
     *      R.last(''); //=> ''
     */
    var last = /*#__PURE__*/nth(-1);

    /**
     * Returns a new list without any consecutively repeating elements. Equality is
     * determined by applying the supplied predicate to each pair of consecutive elements. The
     * first element in a series of equal elements will be preserved.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.14.0
     * @category List
     * @sig ((a, a) -> Boolean) -> [a] -> [a]
     * @param {Function} pred A predicate used to test whether two items are equal.
     * @param {Array} list The array to consider.
     * @return {Array} `list` without repeating elements.
     * @see R.transduce
     * @example
     *
     *      var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];
     *      R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]
     */
    var dropRepeatsWith = /*#__PURE__*/_curry2( /*#__PURE__*/_dispatchable([], _xdropRepeatsWith, function dropRepeatsWith(pred, list) {
      var result = [];
      var idx = 1;
      var len = list.length;
      if (len !== 0) {
        result[0] = list[0];
        while (idx < len) {
          if (!pred(last(result), list[idx])) {
            result[result.length] = list[idx];
          }
          idx += 1;
        }
      }
      return result;
    }));

    /**
     * Returns a new list without any consecutively repeating elements.
     * [`R.equals`](#equals) is used to determine equality.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.14.0
     * @category List
     * @sig [a] -> [a]
     * @param {Array} list The array to consider.
     * @return {Array} `list` without repeating elements.
     * @see R.transduce
     * @example
     *
     *     R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]
     */
    var dropRepeats = /*#__PURE__*/_curry1( /*#__PURE__*/_dispatchable([], /*#__PURE__*/_xdropRepeatsWith(equals), /*#__PURE__*/dropRepeatsWith(equals)));

    /**
     * Returns a new function much like the supplied one, except that the first two
     * arguments' order is reversed.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)
     * @param {Function} fn The function to invoke with its first two parameters reversed.
     * @return {*} The result of invoking `fn` with its first two parameters' order reversed.
     * @example
     *
     *      var mergeThree = (a, b, c) => [].concat(a, b, c);
     *
     *      mergeThree(1, 2, 3); //=> [1, 2, 3]
     *
     *      R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]
     * @symb R.flip(f)(a, b, c) = f(b, a, c)
     */
    var flip = /*#__PURE__*/_curry1(function flip(fn) {
      return curryN(fn.length, function (a, b) {
        var args = Array.prototype.slice.call(arguments, 0);
        args[0] = b;
        args[1] = a;
        return fn.apply(this, args);
      });
    });

    /**
     * Splits a list into sub-lists stored in an object, based on the result of
     * calling a String-returning function on each element, and grouping the
     * results according to values returned.
     *
     * Dispatches to the `groupBy` method of the second argument, if present.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig (a -> String) -> [a] -> {String: [a]}
     * @param {Function} fn Function :: a -> String
     * @param {Array} list The array to group
     * @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements
     *         that produced that key when passed to `fn`.
     * @see R.transduce
     * @example
     *
     *      var byGrade = R.groupBy(function(student) {
     *        var score = student.score;
     *        return score < 65 ? 'F' :
     *               score < 70 ? 'D' :
     *               score < 80 ? 'C' :
     *               score < 90 ? 'B' : 'A';
     *      });
     *      var students = [{name: 'Abby', score: 84},
     *                      {name: 'Eddy', score: 58},
     *                      // ...
     *                      {name: 'Jack', score: 69}];
     *      byGrade(students);
     *      // {
     *      //   'A': [{name: 'Dianne', score: 99}],
     *      //   'B': [{name: 'Abby', score: 84}]
     *      //   // ...,
     *      //   'F': [{name: 'Eddy', score: 58}]
     *      // }
     */
    var groupBy = /*#__PURE__*/_curry2( /*#__PURE__*/_checkForMethod('groupBy', /*#__PURE__*/reduceBy(function (acc, item) {
      if (acc == null) {
        acc = [];
      }
      acc.push(item);
      return acc;
    }, null)));

    /**
     * Returns the first element of the given list or string. In some libraries
     * this function is named `first`.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> a | Undefined
     * @sig String -> String
     * @param {Array|String} list
     * @return {*}
     * @see R.tail, R.init, R.last
     * @example
     *
     *      R.head(['fi', 'fo', 'fum']); //=> 'fi'
     *      R.head([]); //=> undefined
     *
     *      R.head('abc'); //=> 'a'
     *      R.head(''); //=> ''
     */
    var head = /*#__PURE__*/nth(0);

    function _identity(x) {
      return x;
    }

    /**
     * A function that does nothing but return the parameter supplied to it. Good
     * as a default or placeholder function.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig a -> a
     * @param {*} x The value to return.
     * @return {*} The input value, `x`.
     * @example
     *
     *      R.identity(1); //=> 1
     *
     *      var obj = {};
     *      R.identity(obj) === obj; //=> true
     * @symb R.identity(a) = a
     */
    var identity = /*#__PURE__*/_curry1(_identity);

    /**
     * Increments its argument.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category Math
     * @sig Number -> Number
     * @param {Number} n
     * @return {Number} n + 1
     * @see R.dec
     * @example
     *
     *      R.inc(42); //=> 43
     */
    var inc = /*#__PURE__*/add(1);

    /**
     * Given a function that generates a key, turns a list of objects into an
     * object indexing the objects by the given key. Note that if multiple
     * objects generate the same value for the indexing key only the last value
     * will be included in the generated object.
     *
     * Acts as a transducer if a transformer is given in list position.
     *
     * @func
     * @memberOf R
     * @since v0.19.0
     * @category List
     * @sig (a -> String) -> [{k: v}] -> {k: {k: v}}
     * @param {Function} fn Function :: a -> String
     * @param {Array} array The array of objects to index
     * @return {Object} An object indexing each array element by the given property.
     * @example
     *
     *      var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];
     *      R.indexBy(R.prop('id'), list);
     *      //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}
     */
    var indexBy = /*#__PURE__*/reduceBy(function (acc, elem) {
      return elem;
    }, null);

    /**
     * Returns all but the last element of the given list or string.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category List
     * @sig [a] -> [a]
     * @sig String -> String
     * @param {*} list
     * @return {*}
     * @see R.last, R.head, R.tail
     * @example
     *
     *      R.init([1, 2, 3]);  //=> [1, 2]
     *      R.init([1, 2]);     //=> [1]
     *      R.init([1]);        //=> []
     *      R.init([]);         //=> []
     *
     *      R.init('abc');  //=> 'ab'
     *      R.init('ab');   //=> 'a'
     *      R.init('a');    //=> ''
     *      R.init('');     //=> ''
     */
    var init = /*#__PURE__*/slice(0, -1);

    var _Set = /*#__PURE__*/function () {
      function _Set() {
        /* globals Set */
        this._nativeSet = typeof Set === 'function' ? new Set() : null;
        this._items = {};
      }

      // until we figure out why jsdoc chokes on this
      // @param item The item to add to the Set
      // @returns {boolean} true if the item did not exist prior, otherwise false
      //
      _Set.prototype.add = function (item) {
        return !hasOrAdd(item, true, this);
      };

      //
      // @param item The item to check for existence in the Set
      // @returns {boolean} true if the item exists in the Set, otherwise false
      //
      _Set.prototype.has = function (item) {
        return hasOrAdd(item, false, this);
      };

      //
      // Combines the logic for checking whether an item is a member of the set and
      // for adding a new item to the set.
      //
      // @param item       The item to check or add to the Set instance.
      // @param shouldAdd  If true, the item will be added to the set if it doesn't
      //                   already exist.
      // @param set        The set instance to check or add to.
      // @return {boolean} true if the item already existed, otherwise false.
      //
      return _Set;
    }();

    function hasOrAdd(item, shouldAdd, set) {
      var type = typeof item;
      var prevSize, newSize;
      switch (type) {
        case 'string':
        case 'number':
          // distinguish between +0 and -0
          if (item === 0 && 1 / item === -Infinity) {
            if (set._items['-0']) {
              return true;
            } else {
              if (shouldAdd) {
                set._items['-0'] = true;
              }
              return false;
            }
          }
          // these types can all utilise the native Set
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = {};
                set._items[type][item] = true;
              }
              return false;
            } else if (item in set._items[type]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][item] = true;
              }
              return false;
            }
          }

        case 'boolean':
          // set._items['boolean'] holds a two element array
          // representing [ falseExists, trueExists ]
          if (type in set._items) {
            var bIdx = item ? 1 : 0;
            if (set._items[type][bIdx]) {
              return true;
            } else {
              if (shouldAdd) {
                set._items[type][bIdx] = true;
              }
              return false;
            }
          } else {
            if (shouldAdd) {
              set._items[type] = item ? [false, true] : [true, false];
            }
            return false;
          }

        case 'function':
          // compare functions for reference equality
          if (set._nativeSet !== null) {
            if (shouldAdd) {
              prevSize = set._nativeSet.size;
              set._nativeSet.add(item);
              newSize = set._nativeSet.size;
              return newSize === prevSize;
            } else {
              return set._nativeSet.has(item);
            }
          } else {
            if (!(type in set._items)) {
              if (shouldAdd) {
                set._items[type] = [item];
              }
              return false;
            }
            if (!_contains(item, set._items[type])) {
              if (shouldAdd) {
                set._items[type].push(item);
              }
              return false;
            }
            return true;
          }

        case 'undefined':
          if (set._items[type]) {
            return true;
          } else {
            if (shouldAdd) {
              set._items[type] = true;
            }
            return false;
          }

        case 'object':
          if (item === null) {
            if (!set._items['null']) {
              if (shouldAdd) {
                set._items['null'] = true;
              }
              return false;
            }
            return true;
          }
        /* falls through */
        default:
          // reduce the search size of heterogeneous sets by creating buckets
          // for each type.
          type = Object.prototype.toString.call(item);
          if (!(type in set._items)) {
            if (shouldAdd) {
              set._items[type] = [item];
            }
            return false;
          }
          // scan through all previously applied items
          if (!_contains(item, set._items[type])) {
            if (shouldAdd) {
              set._items[type].push(item);
            }
            return false;
          }
          return true;
      }
    }

    /**
     * Returns a new list containing only one copy of each element in the original
     * list, based upon the value returned by applying the supplied function to
     * each list element. Prefers the first item if the supplied function produces
     * the same value on two items. [`R.equals`](#equals) is used for comparison.
     *
     * @func
     * @memberOf R
     * @since v0.16.0
     * @category List
     * @sig (a -> b) -> [a] -> [a]
     * @param {Function} fn A function used to produce a value to use during comparisons.
     * @param {Array} list The array to consider.
     * @return {Array} The list of unique items.
     * @example
     *
     *      R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]
     */
    var uniqBy = /*#__PURE__*/_curry2(function uniqBy(fn, list) {
      var set = new _Set();
      var result = [];
      var idx = 0;
      var appliedItem, item;

      while (idx < list.length) {
        item = list[idx];
        appliedItem = fn(item);
        if (set.add(appliedItem)) {
          result.push(item);
        }
        idx += 1;
      }
      return result;
    });

    /**
     * Returns a new list containing only one copy of each element in the original
     * list. [`R.equals`](#equals) is used to determine equality.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig [a] -> [a]
     * @param {Array} list The array to consider.
     * @return {Array} The list of unique items.
     * @example
     *
     *      R.uniq([1, 1, 2, 1]); //=> [1, 2]
     *      R.uniq([1, '1']);     //=> [1, '1']
     *      R.uniq([[42], [42]]); //=> [[42]]
     */
    var uniq = /*#__PURE__*/uniqBy(identity);

    /**
     * Turns a named method with a specified arity into a function that can be
     * called directly supplied with arguments and a target object.
     *
     * The returned function is curried and accepts `arity + 1` parameters where
     * the final parameter is the target object.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig Number -> String -> (a -> b -> ... -> n -> Object -> *)
     * @param {Number} arity Number of arguments the returned function should take
     *        before the target object.
     * @param {String} method Name of the method to call.
     * @return {Function} A new curried function.
     * @see R.construct
     * @example
     *
     *      var sliceFrom = R.invoker(1, 'slice');
     *      sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'
     *      var sliceFrom6 = R.invoker(2, 'slice')(6);
     *      sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'
     * @symb R.invoker(0, 'method')(o) = o['method']()
     * @symb R.invoker(1, 'method')(a, o) = o['method'](a)
     * @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)
     */
    var invoker = /*#__PURE__*/_curry2(function invoker(arity, method) {
      return curryN(arity + 1, function () {
        var target = arguments[arity];
        if (target != null && _isFunction(target[method])) {
          return target[method].apply(target, Array.prototype.slice.call(arguments, 0, arity));
        }
        throw new TypeError(toString$1(target) + ' does not have a method named "' + method + '"');
      });
    });

    /**
     * Returns a string made by inserting the `separator` between each element and
     * concatenating all the elements into a single string.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category List
     * @sig String -> [a] -> String
     * @param {Number|String} separator The string used to separate the elements.
     * @param {Array} xs The elements to join into a string.
     * @return {String} str The string made by concatenating `xs` with `separator`.
     * @see R.split
     * @example
     *
     *      var spacer = R.join(' ');
     *      spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'
     *      R.join('|', [1, 2, 3]);    //=> '1|2|3'
     */
    var join = /*#__PURE__*/invoker(1, 'join');

    /**
     * juxt applies a list of functions to a list of values.
     *
     * @func
     * @memberOf R
     * @since v0.19.0
     * @category Function
     * @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])
     * @param {Array} fns An array of functions
     * @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.
     * @see R.applySpec
     * @example
     *
     *      var getRange = R.juxt([Math.min, Math.max]);
     *      getRange(3, 4, 9, -3); //=> [-3, 9]
     * @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]
     */
    var juxt = /*#__PURE__*/_curry1(function juxt(fns) {
      return converge(function () {
        return Array.prototype.slice.call(arguments, 0);
      }, fns);
    });

    /**
     * Adds together all the elements of a list.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig [Number] -> Number
     * @param {Array} list An array of numbers
     * @return {Number} The sum of all the numbers in the list.
     * @see R.reduce
     * @example
     *
     *      R.sum([2,4,6,8,100,1]); //=> 121
     */
    var sum = /*#__PURE__*/reduce(add, 0);

    /**
     * A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an
     * additional function that will be applied to a given argument set and used to
     * create the cache key under which the results of the function to be memoized
     * will be stored. Care must be taken when implementing key generation to avoid
     * clashes that may overwrite previous entries erroneously.
     *
     *
     * @func
     * @memberOf R
     * @since v0.24.0
     * @category Function
     * @sig (*... -> String) -> (*... -> a) -> (*... -> a)
     * @param {Function} fn The function to generate the cache key.
     * @param {Function} fn The function to memoize.
     * @return {Function} Memoized version of `fn`.
     * @see R.memoize
     * @example
     *
     *      let count = 0;
     *      const factorial = R.memoizeWith(R.identity, n => {
     *        count += 1;
     *        return R.product(R.range(1, n + 1));
     *      });
     *      factorial(5); //=> 120
     *      factorial(5); //=> 120
     *      factorial(5); //=> 120
     *      count; //=> 1
     */
    var memoizeWith = /*#__PURE__*/_curry2(function memoizeWith(mFn, fn) {
      var cache = {};
      return _arity(fn.length, function () {
        var key = mFn.apply(this, arguments);
        if (!_has(key, cache)) {
          cache[key] = fn.apply(this, arguments);
        }
        return cache[key];
      });
    });

    /**
     * Creates a new function that, when invoked, caches the result of calling `fn`
     * for a given argument set and returns the result. Subsequent calls to the
     * memoized `fn` with the same argument set will not result in an additional
     * call to `fn`; instead, the cached result for that set of arguments will be
     * returned.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig (*... -> a) -> (*... -> a)
     * @param {Function} fn The function to memoize.
     * @return {Function} Memoized version of `fn`.
     * @see R.memoizeWith
     * @deprecated since v0.25.0
     * @example
     *
     *      let count = 0;
     *      const factorial = R.memoize(n => {
     *        count += 1;
     *        return R.product(R.range(1, n + 1));
     *      });
     *      factorial(5); //=> 120
     *      factorial(5); //=> 120
     *      factorial(5); //=> 120
     *      count; //=> 1
     */
    var memoize = /*#__PURE__*/memoizeWith(function () {
      return toString$1(arguments);
    });

    /**
     * Multiplies two numbers. Equivalent to `a * b` but curried.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig Number -> Number -> Number
     * @param {Number} a The first value.
     * @param {Number} b The second value.
     * @return {Number} The result of `a * b`.
     * @see R.divide
     * @example
     *
     *      var double = R.multiply(2);
     *      var triple = R.multiply(3);
     *      double(3);       //=>  6
     *      triple(4);       //=> 12
     *      R.multiply(2, 5);  //=> 10
     */
    var multiply = /*#__PURE__*/_curry2(function multiply(a, b) {
      return a * b;
    });

    function _createPartialApplicator(concat) {
      return _curry2(function (fn, args) {
        return _arity(Math.max(0, fn.length - args.length), function () {
          return fn.apply(this, concat(args, arguments));
        });
      });
    }

    /**
     * Takes a function `f` and a list of arguments, and returns a function `g`.
     * When applied, `g` returns the result of applying `f` to the arguments
     * provided to `g` followed by the arguments provided initially.
     *
     * @func
     * @memberOf R
     * @since v0.10.0
     * @category Function
     * @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)
     * @param {Function} f
     * @param {Array} args
     * @return {Function}
     * @see R.partial
     * @example
     *
     *      var greet = (salutation, title, firstName, lastName) =>
     *        salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';
     *
     *      var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);
     *
     *      greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'
     * @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)
     */
    var partialRight = /*#__PURE__*/_createPartialApplicator( /*#__PURE__*/flip(_concat));

    /**
     * Takes a predicate and a list or other `Filterable` object and returns the
     * pair of filterable objects of the same type of elements which do and do not
     * satisfy, the predicate, respectively. Filterable objects include plain objects or any object
     * that has a filter method such as `Array`.
     *
     * @func
     * @memberOf R
     * @since v0.1.4
     * @category List
     * @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]
     * @param {Function} pred A predicate to determine which side the element belongs to.
     * @param {Array} filterable the list (or other filterable) to partition.
     * @return {Array} An array, containing first the subset of elements that satisfy the
     *         predicate, and second the subset of elements that do not satisfy.
     * @see R.filter, R.reject
     * @example
     *
     *      R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);
     *      // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]
     *
     *      R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });
     *      // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]
     */
    var partition = /*#__PURE__*/juxt([filter, reject]);

    /**
     * Similar to `pick` except that this one includes a `key: undefined` pair for
     * properties that don't exist.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @sig [k] -> {k: v} -> {k: v}
     * @param {Array} names an array of String property names to copy onto a new object
     * @param {Object} obj The object to copy from
     * @return {Object} A new object with only properties from `names` on it.
     * @see R.pick
     * @example
     *
     *      R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}
     *      R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}
     */
    var pickAll = /*#__PURE__*/_curry2(function pickAll(names, obj) {
      var result = {};
      var idx = 0;
      var len = names.length;
      while (idx < len) {
        var name = names[idx];
        result[name] = obj[name];
        idx += 1;
      }
      return result;
    });

    /**
     * Multiplies together all the elements of a list.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Math
     * @sig [Number] -> Number
     * @param {Array} list An array of numbers
     * @return {Number} The product of all the numbers in the list.
     * @see R.reduce
     * @example
     *
     *      R.product([2,4,6,8,100,1]); //=> 38400
     */
    var product = /*#__PURE__*/reduce(multiply, 1);

    /**
     * Accepts a function `fn` and a list of transformer functions and returns a
     * new curried function. When the new function is invoked, it calls the
     * function `fn` with parameters consisting of the result of calling each
     * supplied handler on successive arguments to the new function.
     *
     * If more arguments are passed to the returned function than transformer
     * functions, those arguments are passed directly to `fn` as additional
     * parameters. If you expect additional arguments that don't need to be
     * transformed, although you can ignore them, it's best to pass an identity
     * function so that the new function reports the correct arity.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Function
     * @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)
     * @param {Function} fn The function to wrap.
     * @param {Array} transformers A list of transformer functions
     * @return {Function} The wrapped function.
     * @see R.converge
     * @example
     *
     *      R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81
     *      R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81
     *      R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32
     *      R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32
     * @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))
     */
    var useWith = /*#__PURE__*/_curry2(function useWith(fn, transformers) {
      return curryN(transformers.length, function () {
        var args = [];
        var idx = 0;
        while (idx < transformers.length) {
          args.push(transformers[idx].call(this, arguments[idx]));
          idx += 1;
        }
        return fn.apply(this, args.concat(Array.prototype.slice.call(arguments, transformers.length)));
      });
    });

    /**
     * Reasonable analog to SQL `select` statement.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Object
     * @category Relation
     * @sig [k] -> [{k: v}] -> [{k: v}]
     * @param {Array} props The property names to project
     * @param {Array} objs The objects to query
     * @return {Array} An array of objects with just the `props` properties.
     * @example
     *
     *      var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};
     *      var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};
     *      var kids = [abby, fred];
     *      R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]
     */
    var project = /*#__PURE__*/useWith(_map, [pickAll, identity]); // passing `identity` gives correct arity

    /**
     * Replace a substring or regex match in a string with a replacement.
     *
     * @func
     * @memberOf R
     * @since v0.7.0
     * @category String
     * @sig RegExp|String -> String -> String -> String
     * @param {RegExp|String} pattern A regular expression or a substring to match.
     * @param {String} replacement The string to replace the matches with.
     * @param {String} str The String to do the search and replacement in.
     * @return {String} The result.
     * @example
     *
     *      R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'
     *      R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'
     *
     *      // Use the "g" (global) flag to replace all occurrences:
     *      R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'
     */
    var replace = /*#__PURE__*/_curry3(function replace(regex, replacement, str) {
      return str.replace(regex, replacement);
    });

    /**
     * Splits a string into an array of strings based on the given
     * separator.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category String
     * @sig (String | RegExp) -> String -> [String]
     * @param {String|RegExp} sep The pattern.
     * @param {String} str The string to separate into an array.
     * @return {Array} The array of strings from `str` separated by `str`.
     * @see R.join
     * @example
     *
     *      var pathComponents = R.split('/');
     *      R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']
     *
     *      R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']
     */
    var split = /*#__PURE__*/invoker(1, 'split');

    /**
     * The lower case version of a string.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category String
     * @sig String -> String
     * @param {String} str The string to lower case.
     * @return {String} The lower case version of `str`.
     * @see R.toUpper
     * @example
     *
     *      R.toLower('XYZ'); //=> 'xyz'
     */
    var toLower = /*#__PURE__*/invoker(0, 'toLowerCase');

    /**
     * The upper case version of a string.
     *
     * @func
     * @memberOf R
     * @since v0.9.0
     * @category String
     * @sig String -> String
     * @param {String} str The string to upper case.
     * @return {String} The upper case version of `str`.
     * @see R.toLower
     * @example
     *
     *      R.toUpper('abc'); //=> 'ABC'
     */
    var toUpper = /*#__PURE__*/invoker(0, 'toUpperCase');

    /**
     * Initializes a transducer using supplied iterator function. Returns a single
     * item by iterating through the list, successively calling the transformed
     * iterator function and passing it an accumulator value and the current value
     * from the array, and then passing the result to the next call.
     *
     * The iterator function receives two values: *(acc, value)*. It will be
     * wrapped as a transformer to initialize the transducer. A transformer can be
     * passed directly in place of an iterator function. In both cases, iteration
     * may be stopped early with the [`R.reduced`](#reduced) function.
     *
     * A transducer is a function that accepts a transformer and returns a
     * transformer and can be composed directly.
     *
     * A transformer is an an object that provides a 2-arity reducing iterator
     * function, step, 0-arity initial value function, init, and 1-arity result
     * extraction function, result. The step function is used as the iterator
     * function in reduce. The result function is used to convert the final
     * accumulator into the return type and in most cases is
     * [`R.identity`](#identity). The init function can be used to provide an
     * initial accumulator, but is ignored by transduce.
     *
     * The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.
     *
     * @func
     * @memberOf R
     * @since v0.12.0
     * @category List
     * @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a
     * @param {Function} xf The transducer function. Receives a transformer and returns a transformer.
     * @param {Function} fn The iterator function. Receives two values, the accumulator and the
     *        current element from the array. Wrapped as transformer, if necessary, and used to
     *        initialize the transducer
     * @param {*} acc The initial accumulator value.
     * @param {Array} list The list to iterate over.
     * @return {*} The final, accumulated value.
     * @see R.reduce, R.reduced, R.into
     * @example
     *
     *      var numbers = [1, 2, 3, 4];
     *      var transducer = R.compose(R.map(R.add(1)), R.take(2));
     *      R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]
     *
     *      var isOdd = (x) => x % 2 === 1;
     *      var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));
     *      R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]
     */
    var transduce = /*#__PURE__*/curryN(4, function transduce(xf, fn, acc, list) {
      return _reduce(xf(typeof fn === 'function' ? _xwrap(fn) : fn), acc, list);
    });

    var ws = '\x09\x0A\x0B\x0C\x0D\x20\xA0\u1680\u180E\u2000\u2001\u2002\u2003' + '\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028' + '\u2029\uFEFF';
    var zeroWidth = '\u200b';
    var hasProtoTrim = typeof String.prototype.trim === 'function';
    /**
     * Removes (strips) whitespace from both ends of the string.
     *
     * @func
     * @memberOf R
     * @since v0.6.0
     * @category String
     * @sig String -> String
     * @param {String} str The string to trim.
     * @return {String} Trimmed version of `str`.
     * @example
     *
     *      R.trim('   xyz  '); //=> 'xyz'
     *      R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']
     */
    var _trim = !hasProtoTrim || /*#__PURE__*/ws.trim() || ! /*#__PURE__*/zeroWidth.trim() ? function trim(str) {
      var beginRx = new RegExp('^[' + ws + '][' + ws + ']*');
      var endRx = new RegExp('[' + ws + '][' + ws + ']*$');
      return str.replace(beginRx, '').replace(endRx, '');
    } : function trim(str) {
      return str.trim();
    };

    /**
     * Combines two lists into a set (i.e. no duplicates) composed of the elements
     * of each list.
     *
     * @func
     * @memberOf R
     * @since v0.1.0
     * @category Relation
     * @sig [*] -> [*] -> [*]
     * @param {Array} as The first list.
     * @param {Array} bs The second list.
     * @return {Array} The first and second lists concatenated, with
     *         duplicates removed.
     * @example
     *
     *      R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]
     */
    var union = /*#__PURE__*/_curry2( /*#__PURE__*/compose(uniq, _concat));

    /**
     * Shorthand for `R.chain(R.identity)`, which removes one level of nesting from
     * any [Chain](https://github.com/fantasyland/fantasy-land#chain).
     *
     * @func
     * @memberOf R
     * @since v0.3.0
     * @category List
     * @sig Chain c => c (c a) -> c a
     * @param {*} list
     * @return {*}
     * @see R.flatten, R.chain
     * @example
     *
     *      R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]
     *      R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]
     */
    var unnest = /*#__PURE__*/chain(_identity);

    var prewarmCache = function (path$$1) {
        fetch(path$$1);
    };
    var attachToDom = cond([
        [isCss, loadCss],
        [T, loadJs]
    ]);
    var isPending = pipe(prop('fetchStatus'), equals(FETCH_STATUS.PENDING));
    var loadResources = function (dependencies, byPassCache) {
        if (byPassCache === void 0) { byPassCache = false; }
        var pendingDependencies = dependencies.filter(isPending);
        pendingDependencies.forEach(function (dependency) {
            if (dependency.hasDependencies && !byPassCache) {
                prewarmCache(dependency.path);
            }
            else {
                attachToDom(dependency);
            }
        });
    };

    var makeRandomId = function (length) {
        if (length === void 0) { length = 8; }
        var text = '';
        var possibleCharacters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
        for (var i = 0; i < length; i += 1) {
            text += possibleCharacters.charAt(Math.floor(Math.random() * possibleCharacters.length));
        }
        return text;
    };

    var getResourceElements = function (container) {
        if (container === void 0) { container = document; }
        return [].slice.call(container.querySelectorAll('[data-resources]'));
    };

    var getDataResourceFromElement = pipe(defaultTo(document.createElement('div')), prop('dataset'), prop('resources'), defaultTo(''));

    var getComponentQueueFromElement = pipe(defaultTo(document.createElement('div')), getDataResourceFromElement, eval, defaultTo([]));

    var getQueuesFromDOM = function (container) {
        if (container === void 0) { container = document; }
        var domResources = getResourceElements(container);
        return domResources.map(function (dr) { return ({
            id: makeRandomId(),
            definitions: getComponentQueueFromElement(dr)
        }); });
    };

    var hasDependencies = function (definition) { return definition.dependsOn && definition.dependsOn.length > 0; };

    // checks if all packages are resolveable if not it will show an error.
    var checkDependencies = function (identitfiableResourceQueues) {
        var allPaths = [];
        var dependencies = [];
        for (var _i = 0, identitfiableResourceQueues_1 = identitfiableResourceQueues; _i < identitfiableResourceQueues_1.length; _i++) {
            var identitfiableResourceQueue = identitfiableResourceQueues_1[_i];
            for (var _a = 0, _b = identitfiableResourceQueue.definitions; _a < _b.length; _a++) {
                var resourceDefinition = _b[_a];
                allPaths.concat(resourceDefinition.paths);
                // if has a dependency add it
                if (hasDependencies(resourceDefinition)) {
                    dependencies.concat(resourceDefinition.dependsOn);
                }
            }
        }
        // check if dependencies are resolvable
        for (var _c = 0, dependencies_1 = dependencies; _c < dependencies_1.length; _c++) {
            var dependency = dependencies_1[_c];
            if (allPaths.indexOf(dependency) === -1) {
                console.error("\u26A0\uFE0F ERROR " + dependency + " not resolvable. Not all events will be fired!");
            }
        }
    };

    // not really necessary but important for perf?
    // returns true if all dependencies of a path are already lined up
    var alreadyRegistered = function (paths, requests) {
        if (paths === void 0) { paths = []; }
        if (requests === void 0) { requests = []; }
        return paths.every(function (p) { return requests.some(function (r) { return r.path === p; }); });
    };

    var ensureUniquePaths = function (resources, definition) {
        var currentQueue = resources.slice();
        var _loop_1 = function (path$$1) {
            var index = currentQueue.findIndex(function (req) { return req.path === path$$1; });
            if (index === -1) {
                currentQueue = currentQueue.concat([
                    {
                        path: path$$1,
                        hasDependencies: hasDependencies(definition),
                        sourceIds: [definition.sourceId],
                        componentIds: [definition.id],
                        fetchStatus: FETCH_STATUS.PENDING
                    }
                ]);
            }
            else {
                currentQueue = produce(currentQueue, function (draftState) {
                    draftState[index].sourceIds.push(definition.sourceId);
                    draftState[index].componentIds.push(definition.id);
                });
            }
        };
        for (var _i = 0, _a = definition.paths; _i < _a.length; _i++) {
            var path$$1 = _a[_i];
            _loop_1(path$$1);
        }
        return currentQueue;
    };
    var swap = function (arr, i, j) {
        var temp = arr.slice();
        temp[i] = arr[j];
        temp[j] = arr[i];
        return temp;
    };
    var addToQueue = function (resourceDefinitions, queuedResources, counter) {
        if (resourceDefinitions === void 0) { resourceDefinitions = []; }
        if (queuedResources === void 0) { queuedResources = []; }
        if (counter === void 0) { counter = 0; }
        if (!resourceDefinitions.length) {
            return queuedResources;
        }
        var currentQueue = queuedResources;
        var currentDefinition = resourceDefinitions[0];
        var tempResourceDefinitions;
        var i = counter;
        if (hasDependencies(currentDefinition) &&
            !alreadyRegistered(currentDefinition.dependsOn, queuedResources) &&
            resourceDefinitions.length >= 2 + counter) {
            i++; // counter get up
            // ⚠️ TODO: This creates unnessecary loops!!!!!!
            tempResourceDefinitions = swap(resourceDefinitions, 0, i);
        }
        else {
            tempResourceDefinitions = tail(resourceDefinitions);
            i = 0;
            currentQueue = ensureUniquePaths(currentQueue, currentDefinition);
        }
        // if array not empty go for it again 🏃‍
        if (tempResourceDefinitions.length !== 0) {
            return addToQueue(tempResourceDefinitions, currentQueue, i);
        }
        else {
            // return ordered requests.
            return currentQueue;
        }
    };

    // flattens the datastructure to packages, add resource id to resolve back
    function getDefinitionsFromQueues(queues) {
        var flatten = [];
        for (var _i = 0, queues_1 = queues; _i < queues_1.length; _i++) {
            var queue = queues_1[_i];
            var _loop_1 = function (definition) {
                var definitionClone = __assign({}, definition);
                definitionClone.sourceId = queue.id;
                flatten = produce(flatten, function (draftState) {
                    draftState.push(definition);
                });
            };
            for (var _a = 0, _b = queue.definitions; _a < _b.length; _a++) {
                var definition = _b[_a];
                _loop_1(definition);
            }
        }
        return flatten;
    }
    // if a package is ready the component is updated, if all packages are loaded a component ready event gets fired.
    var updateComponentResources = function (readyResources, resolvedDefinition) {
        var ready = readyResources.slice();
        var _loop_2 = function (readyComponentPkg) {
            var _a = ready[readyComponentPkg], id = _a.id, definitions = _a.definitions;
            // if the queue is the source of the definition
            if (id === resolvedDefinition.sourceId) {
                var _loop_3 = function (pkgKey) {
                    // if the definition is the same
                    if (resolvedDefinition.id === definitions[pkgKey].id) {
                        // remove the definition from this queue
                        ready = produce(ready, function (draftState) {
                            draftState[readyComponentPkg].definitions.splice(parseInt(pkgKey, 10), 1);
                        });
                        // fire ready event if all the definitions have been resolved
                        var updatedResources = ready[readyComponentPkg].definitions;
                        if (updatedResources.length === 0) {
                            var event_1 = new CustomEvent(EVENTS.COMPONENT_READY, { detail: id });
                            document.dispatchEvent(event_1);
                        }
                    }
                };
                // loop over all definitions in the queue
                for (var pkgKey in definitions) {
                    _loop_3(pkgKey);
                }
            }
        };
        // loop over all component queues
        for (var readyComponentPkg in ready) {
            _loop_2(readyComponentPkg);
        }
        // return new queues without the resolved one
        return ready;
    };

    var resolveBaseWith = function (baseMap, base) {
        if (!(base.substring(0, 2) === '##')) {
            return base;
        }
        return baseMap[base] || '';
    };
    var resolveBaseWith$1 = curry(resolveBaseWith);

    var isAbsolute = function (path) { return new RegExp('^(?:[a-z]+:)?//', 'i').test(path); };

    var isRootPath = function (path) { return path.indexOf('/') === 0 && path.indexOf('//') !== 0; };

    var getTrailingSlashesRegex = function () { return /\/?$/; };
    var getLeadingSlashesRegex = function () { return /^\/?/; };

    var ensureTrailingSlash = replace(getTrailingSlashesRegex(), '/');

    var ensureNoLeadingSlash = replace(getLeadingSlashesRegex(), '');

    var defaultToEmptyString = defaultTo('');
    var ensureAbsolutePath = function (location) { return cond([
        [isAbsolute, identity],
        [isRootPath, pipe(ensureNoLeadingSlash, concat(ensureTrailingSlash(location.origin)))],
        [T, pipe(ensureNoLeadingSlash, concat(ensureTrailingSlash(location.href)))]
    ]); };
    var createEnsureAbsolutePath = function (location) { return pipe(defaultToEmptyString, ensureAbsolutePath(location)); };

    var isRelative = function (path) { return !isAbsolute(path); };

    var normalizePath = function (path, resource, options) {
        if (path === void 0) { path = ''; }
        if (resource && options && isRelative(path)) {
            if (resource.base) {
                var resolveBase = resolveBaseWith$1(options.baseMap);
                var ensureAbsolutePath = createEnsureAbsolutePath(window.location);
                return ensureAbsolutePath(ensureTrailingSlash(resolveBase(resource.base)) + path);
            }
        }
        return path;
    };

    var prepareDefinition = function (definition, options) { return (__assign({}, definition, { id: makeRandomId(), paths: definition.paths.map(function (path) { return normalizePath(path, definition, options); }), dependsOn: definition.dependsOn.map(function (path) { return normalizePath(path, definition, options); }), sourceId: '' })); };

    var ResourceLoader = /** @class */ (function () {
        function ResourceLoader(options) {
            if (options === void 0) { options = { container: '', readyEvent: 'resourcesReady' }; }
            this.componentCounter = 0;
            this.options = null;
            this.queue = {
                componentQueues: [],
                resourceDefinitions: [],
                readyResources: [],
                readyComponentResources: [],
                resources: []
            };
            this.options = options;
            this.init(this.options);
        }
        ResourceLoader.prototype.bindEvents = function () {
            document.addEventListener(EVENTS.RESOURCE_LOADED, this.onResourceLoaded.bind(this));
            document.addEventListener(EVENTS.COMPONENT_READY, this.onComponentReady.bind(this));
            document.addEventListener(this.options.readyEvent, this.onReady.bind(this));
        };
        ResourceLoader.prototype.init = function (options) {
            var _this = this;
            this.queue.componentQueues = getQueuesFromDOM(document.querySelector(options.container))
                .map(function (queue) {
                return __assign({}, queue, { definitions: queue.definitions.map(function (definition) {
                        return prepareDefinition(definition, _this.options);
                    }) });
            });
            // ⚠️ I DONT KNOW WHAT THIS DOES
            checkDependencies(this.queue.componentQueues);
            this.queue.resourceDefinitions = getDefinitionsFromQueues(this.queue.componentQueues);
            this.queue.resources = addToQueue(this.queue.resourceDefinitions);
            loadResources(this.queue.resources);
            this.queue.readyResources = this.queue.componentQueues.slice();
            this.queue.readyComponentResources = this.queue.resourceDefinitions.slice();
            this.bindEvents();
        };
        ResourceLoader.prototype.getStatus = function () {
            return this.queue;
        };
        ResourceLoader.prototype.update = function (container) {
        };
        ResourceLoader.prototype.onResourceLoaded = function (event) {
            var _a;
            for (var index in this.queue.resources) {
                if (event.detail.path === this.queue.resources[index].path) {
                    this.queue.resources = __assign({}, this.queue.resources, (_a = {}, _a[index] = __assign({}, this.queue.resources[index], { fetch: FETCH_STATUS.DONE }), _a));
                    break;
                }
            }
            var _loop_1 = function (definitionIndex) {
                var definition = this_1.queue.readyComponentResources[definitionIndex];
                if (hasDependencies(definition)) {
                    // check if resolved resource is a dependency
                    var index_1 = definition.dependsOn.indexOf(event.detail.path);
                    if (index_1 > -1) {
                        // and remove dependency from dependency queue
                        this_1.queue.readyComponentResources = produce(this_1.queue.readyComponentResources, function (draftState) {
                            draftState[definitionIndex].dependsOn.splice(index_1, 1);
                        });
                        // if there are no more dependencies now, add the definition
                        var updatedDefinition = this_1.queue.readyComponentResources[definitionIndex];
                        if (!hasDependencies(updatedDefinition)) {
                            loadResources(addToQueue([updatedDefinition]), true);
                        }
                    }
                }
                // if there are no dependencies set
                else {
                    // check if the loaded resource is a main resource of this definition
                    var index_2 = definition.paths.indexOf(event.detail.path);
                    if (index_2 > -1) {
                        this_1.queue.readyComponentResources = produce(this_1.queue.readyComponentResources, function (draftState) {
                            draftState[definitionIndex].paths.splice(index_2, 1);
                        });
                        // if all the resources have been resolved
                        var updatedPkg = this_1.queue.readyComponentResources[definitionIndex];
                        if (updatedPkg.paths.length === 0) {
                            this_1.queue.readyResources = updateComponentResources(this_1.queue.readyResources, definition);
                        }
                    }
                }
            };
            var this_1 = this;
            // loop through all definitions
            for (var definitionIndex in this.queue.readyComponentResources) {
                _loop_1(definitionIndex);
            }
        };
        ResourceLoader.prototype.onComponentReady = function (event) {
            console.log("component with id: " + event.detail + " ready");
            this.componentCounter++;
            if (this.allComponentsResolved) {
                var event_1 = new CustomEvent(this.options.readyEvent);
                document.dispatchEvent(event_1);
            }
        };
        ResourceLoader.prototype.onReady = function (event) {
            console.log('all resources loaded');
        };
        Object.defineProperty(ResourceLoader.prototype, "allComponentsResolved", {
            get: function () {
                return this.componentCounter === this.queue.readyResources.length;
            },
            enumerable: true,
            configurable: true
        });
        return ResourceLoader;
    }());

    return ResourceLoader;

})));
